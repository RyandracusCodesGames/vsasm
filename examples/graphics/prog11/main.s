#-----------------------------------------------------------
# VideoStation Assembler
# (C) 2025 Ryandracus Chapman
#-----------------------------------------------------------
# PlayStation Graphics Program 11: Transparency on the PSX
#-----------------------------------------------------------
# Video Mode: 256x240 NTSC 16-BIT COLOR
#-----------------------------------------------------------

VS_IO equ 0x1F800000
VS_GP0 equ 0x1810
VS_GP1 equ 0x1814
VS_FILL_SCREEN equ 0x2000000
VS_SHADE_TRIANGLE equ 0x30000000
VS_SHADE_SEMI_TRANS_TRIANGLE equ 0x32000000
VS_DRAW_TRIANGLE equ 0x20000000
VS_DRAW_SEMI_TRANS_TRIANGLE equ 0x22000000
VS_TEXTURE_FOUR_POINT_POLY equ 0x2F000000
VS_DRAW_LINE equ 0x40000000
VS_SEMI_TRANS_DRAW_LINE equ 0x42000000
VS_CPU_TO_VRAM equ 0xA0000000
VS_MODE equ 0 
VS_WIDTH equ 256 
VS_HEIGHT equ 240

VS_KPIMGW equ 32 
VS_KPIMGH equ 32

VS_KPIMGX equ 114 
VS_KPIMGY equ 20

; CHOOSE R,G, B VALUES FROM 0 TO 255

VS_R equ 75
VS_G equ 0
VS_B equ 130

; vs_gp0 = vs_io_addr + vs_gp0;
; vs_gp1 = vs_io_addr + vs_gp1;

InitVideo:
	li $t0, VS_IO           ; vs_io_addr = 0x1F800000; (base i/o address of memory map) 
	sw $zero, VS_GP1($t0)   ; *vs_gp1 = vs_cmd_gpu_reset;
	li $t1, 0x4000000       ; vs_cmd_dma_req = 0x4000000 (no dma)
	sw $t1, VS_GP1($t0)      ; *vs_gp0 = vs_cmd_dma_req;
	li $t1, 0x8000000       ; vs_cmd_display_mode = 0x8000000 + mode;
	addiu $t1, $t1, VS_MODE ; vs_cmd_display_enable += mode;
	sw $t1, VS_GP1($t0)     ; *vs_gp1 = vs_cmd_display_enable;
	li $t5, 0xC4E24E        ; vs_hrange = 0xC4E24E;
	li $t6, 0x040010        ; vs_vrange = 0x040010;
	li $t1, 0x06000000      ; vs_cmd_horizontal_range = 0x6000000
	addu $t1, $t1, $t5      ; vs_cmd_horizontal_range += vs_hrange;
	sw $t1, VS_GP1($t0)     ; *vs_gp1 = vs_cmd_horizontal_range;
	li $t1, 0x07000000      ; vs_cmd_vertical_range = 0x7000000;
	addu $t1, $t1, $t6      ; vs_cmd_vertical_range += vs_vrange;
	sw $t1, VS_GP1($t0)     ; *vs_gp1 = vs_cmd_vertical_range;
	li $t1, 0x05000000      ; vs_cmd_display_x1y1 = 0x5000000; (start x, y of display = 0)
	sw $t1, VS_GP1($t0)     ; *vs_gp1 = vs_cmd_display_x1y1;
	li   $t1, 0xE1000000    ; cmd = gpu0_cmd_tex_page;
	addi $t1, $t1, 0x000508 ; cmd += 0x000508;  
	sw   $t1, VS_GP0($t0)   ; *vs_gpu0 = cmd;
	li   $t1, 0xE3000000    ; cmd = gpu0_cmd_draw_area_top_left;
	sw   $t1, VS_GP0($t0)   ; *vs_gpu0 = cmd;
	li   $t1, 0xE4000000    ; cmd = gpu0_cmd_draw_area_bot_right;
	li   $t2, VS_HEIGHT
	li   $t3, VS_WIDTH
	sll  $t2, $t2, 0x0A     ; height <<= 10;
	addu $t2, $t2, $t3      ; height += width;
	addu $t1, $t1, $t2      ; cmd += height;
	sw   $t1, VS_GP0($t0)   ; *vs_gpu0 = cmd;
	li   $t1, 0xE5000000    ; cmd = gpu0_cmd_draw_offset;
	sw   $t1, VS_GP0($t0)   ; *vs_gpu0 = cmd;
	li   $t1, 0x03000000    ; cmd = gpu1_cmd_display_enable;
	sw   $t1, VS_GP1($t0)   ; *vs_gpu1 = cmd;
FillScreen:
	li $t1, VS_FILL_SCREEN  ; vs_cmd_fill_screen = VS_FILL_SCREEN;
	li $t2, VS_B 
	andi $t2, $t2, 0xff     ; b &= 0xff;
	sll $t2, $t2, 0x10      ; b <<= 16;
	li $t3, VS_G 
	andi $t3, $t3, 0xff     ; g &= 0xff;
	sll $t3, $t3, 0x8       ; g <<= 8;
	addu $t2, $t2, $t3      ; b += g;
	addiu $t2, $t2, VS_R    ; b += r;
	addu $t1, $t1, $t2      ; vs_cmd_fill_screen += b;
	sw $t1, VS_GP0($t0)     ; *vs_gp0 = vs_cmd_fill_screen;
	sw $zero, VS_GP0($t0)   ; *vs_gp0 = 0; (x1, y1 = 0) 
	li $t2, VS_HEIGHT
	andi $t2, $t2, 0xFFFF   ; height &= 0xFFFF;
	sll $t2, $t2, 0x10      ; height <<= 16;
	li $t3, VS_WIDTH
	andi $t3, $t3, 0xFFFF   ; width &= 0xFFFF;
	addu $t2, $t2, $t3      ; height += width; 
	sw $t2, VS_GP0($t0)     ; *vs_gp0 = height;
TransferPattyImageToVram:
	li $t2, VS_CPU_TO_VRAM  ; vs_cmd_cpu_to_vram = 0xA0000000;
	sw $t2, VS_GP0($t0)     ; *vs_gp0 = vs_cmd_cpu_to_vram;
	li $t2, 320             ; x = 320;
	li $t3, 0               ; y = 0;
	sll $t3, $t3, 0x10      ; y <<= 16;
	addu $t3, $t3, $t2      ; y += x;
	sw $t3, VS_GP0($t0)     ; *vs_gp0 = y;
	li $t2, VS_KPIMGW       ; w = VS_KPIMGW;
	li $t3, VS_KPIMGH       ; h = VS_KPIMGH;
	sll $t3, $t3, 0x10      ; h <<= 16;
	addu $t3, $t3, $t2      ; h += w;
	sw $t3, VS_GP0($t0)     ; *vs_gp0 = h;
	li $t1, VS_KPIMGW       ; w = VS_KPIMGW;
	li $t2, VS_KPIMGH       ; h = VS_KPIMGH;
	mult $t1, $t2           ; size = x * y;
	mflo $t1 
	sll $t1, $t1, 0x1       ; size <<= 1;
	sra $t1, $t1, 0x2       ; size /= 4;
	la $a0, KrabbyPatty
TransferPattyLoop:
	lw $t2,0($a0)
	addiu $a0, $a0, 0x4
	sw $t2, VS_GP0($t0)
	bnez $t1, TransferPattyLoop
	subi $t1, $t1, 0x1
	subi $sp, $sp, 36
	li $a0, 140
	li $a1, 140 
	li $a2, 190
	li $a3, 50 
	li $t1, 240
	li $t2, 140
	li $t3, 0x0000FF
	li $t4, 0x00FF00
	li $t5, 0xFF0000
	sw $t1, 16($sp) 
	sw $t2, 20($sp) 
	sw $t3, 24($sp) 
	sw $t4, 28($sp) 
	sw $t5, 32($sp) 
	jal ShadeSemiTransTriangle
	nop
	li $a0, 10
	li $a1, 140 
	li $a2, 60
	li $a3, 50 
	li $t1, 110
	li $t2, 140
	li $t3, 0x0000FF
	li $t4, 0x00FF00
	li $t5, 0xFF0000
	sw $t1, 16($sp) 
	sw $t2, 20($sp) 
	sw $t3, 24($sp) 
	sw $t4, 28($sp) 
	sw $t5, 32($sp) 
	jal ShadeTriangle
	nop
	li $a0, 155
	li $a1, 70 
	li $a2, 215
	li $a3, 70 
	li $t1, 0x0000FF
	sw $t1, 16($sp) 
	jal DrawLine
	nop
	li $a0, 20
	li $a1, 70 
	li $a2, 100
	li $a3, 70 
	li $t1, 0x0000FF
	sw $t1, 16($sp) 
	jal DrawSemiTransLine
	nop
	li $a0, 55
	li $a1, 220 
	li $a2, 105
	li $a3, 130 
	li $t1, 155
	li $t2, 220
	li $t3, 0x0000FF
	sw $t1, 16($sp) 
	sw $t2, 20($sp) 
	sw $t3, 24($sp) 
	jal DrawTriangle
	nop
	li $a0, 95
	li $a1, 220 
	li $a2, 145
	li $a3, 130 
	li $t1, 195
	li $t2, 220
	li $t3, 0xFF0000
	sw $t1, 16($sp) 
	sw $t2, 20($sp) 
	sw $t3, 24($sp) 
	jal DrawSemiTransTriangle
	nop
TextureKrabbyPatty:
	li $t3, VS_KPIMGX
	li $t4, VS_KPIMGY
	li   $t1, 0xE6000000   ; cmd = gpu0_cmd_mask_bits;
	addi $t1, $t1, 0x1     ; cmd += 1;
	sw $t1, VS_GP0($t0)    ; *vs_gp0 = cmd;
	move $a0, $t3          ; x1 = VS_KPIMGX;
	move $a1, $t4          ; y1 = VS_KPIMGY;
	li $a2, 0x0            ; palette = 0;
	li $a3, 0x0            ; u1 = 0;
	sw $zero, 16($sp)      ; v1 = 0;
	sw $t3, 20($sp)        ; x2 = VS_KPIMGX;
	li $t1, VS_KPIMGH
	add $t1, $t1, $t4 
	sw $t1, 24($sp)        ; y2 = VS_KPIMGY + VS_KPIMGH;
	li $t1, 293
	sw $t1, 28($sp)        ; texpage = 293; 
	sw $zero, 32($sp)      ; u2 = 0;
	li $t1, VS_KPIMGH 
	sw $t1, 36($sp)        ; v2 = VS_KPIMGH;
	li $t1, VS_KPIMGW 
	addu $t1, $t1, $t3
	sw $t1, 40($sp)        ; x3 = VS_KPIMGX + VS_KPIMGW;
	sw $t4, 44($sp)        ; y3 = VS_KPIMGY;
	li $t1, VS_KPIMGW 
	sw $t1, 48($sp)        ; u3 = VS_KPIMGW;
	sw $zero, 52($sp)      ; v3 = 0;
	li $t1, VS_KPIMGW 
	add $t1, $t1, $t3
	sw $t1, 56($sp)        ; x4 = VS_KPIMGX + VS_KPIMGW;
	li $t1, VS_KPIMGH 
	add $t1, $t1, $t4 
	sw $t1, 60($sp)        ; y4 = VS_KPIMGY + VS_KPIMGH 
	li $t1, VS_KPIMGW 
	sw $t1, 64($sp)        ; u4 = VS_KPIMGW;
	li $t1, VS_KPIMGH 
	sw $t1, 68($sp)        ; v4 = VS_KPIMGH;
	jal VS_TextureFourPointPoly
	nop
main:
	b main 
	nop
	addi $sp, $sp, 36

# Function: ShadeTriangle
# Purpose: Draws a gouraud-shaded triange to the display area
# a0: x1, a1: y1, a2: x2, a3: y2, 16($sp): x3, 20($sp): y3, 24($sp): color1, 28($sp): color2, 32($sp): color3
ShadeTriangle:
	li $t0, VS_IO
	lw $t2, 24($sp)
	li $t1, VS_SHADE_TRIANGLE ; vs_cmd_shade_triangle = 0x3000000; (delay slot)
	addu $t1, $t1, $t2        ; vs_cmd_shade_triangle += color1;
	sw $t1, VS_GP0($t0)       ; *vs_gp0 = vs_cmd_shade_triangle;
	andi $a0, $a0, 0xFFFF     ; x1 &= 0xFFFF;
	sll $a1, $a1, 0x10        ; y1 <<= 16;
	addu $a1, $a1, $a0        ; y1 += x1; 
	sw $a1, VS_GP0($t0)       ; *vs_gp0 = y1;
	lw $t2, 28($sp)
	andi $a2, $a2, 0xFFFF     ; x2 &= 0xFFFF; (delay slot)
	sw $t2, VS_GP0($t0)       ; *vs_gp0 = color2;
	sll $a3, $a3, 0x10        ; y2 <<= 16;
	addu $a3, $a3, $a2        ; y2 += x2; 
	lw $t1, 32($sp)
	lw $a0, 16($sp)
	sw $a3, VS_GP0($t0)       ; *vs_gp0 = y2;
	sw $t1, VS_GP0($t0)       ; *vs_gp0 = color3;
	lw $a1, 20($sp)
	andi $a0, $a0, 0xFFFF     ; x3 &= 0xFFFF;
	sll $a1, $a1, 0x10        ; y3 <<= 16;
	addu $a1, $a1, $a0        ; y3 += x3; 
	sw $a1, VS_GP0($t0)       ; *vs_gp0 = y3;
	jr $ra 
	nop
	
# Function: ShadeSemiTransTriangle
# Purpose: Draws a semi-transparent gouraud-shaded triange to the display area
# a0: x1, a1: y1, a2: x2, a3: y2, 16($sp): x3, 20($sp): y3, 24($sp): color1, 28($sp): color2, 32($sp): color3
ShadeSemiTransTriangle:
	li $t0, VS_IO
	lw $t2, 24($sp)
	li $t1, VS_SHADE_SEMI_TRANS_TRIANGLE ; vs_cmd_shade_triangle = 0x3200000; (delay slot)
	addu $t1, $t1, $t2        ; vs_cmd_shade_triangle += color1;
	sw $t1, VS_GP0($t0)       ; *vs_gp0 = vs_cmd_shade_triangle;
	andi $a0, $a0, 0xFFFF     ; x1 &= 0xFFFF;
	sll $a1, $a1, 0x10        ; y1 <<= 16;
	addu $a1, $a1, $a0        ; y1 += x1; 
	sw $a1, VS_GP0($t0)       ; *vs_gp0 = y1;
	lw $t2, 28($sp)
	andi $a2, $a2, 0xFFFF     ; x2 &= 0xFFFF; (delay slot)
	sw $t2, VS_GP0($t0)       ; *vs_gp0 = color2;
	sll $a3, $a3, 0x10        ; y2 <<= 16;
	addu $a3, $a3, $a2        ; y2 += x2; 
	lw $t1, 32($sp)
	lw $a0, 16($sp)
	sw $a3, VS_GP0($t0)       ; *vs_gp0 = y2;
	sw $t1, VS_GP0($t0)       ; *vs_gp0 = color3;
	lw $a1, 20($sp)
	andi $a0, $a0, 0xFFFF     ; x3 &= 0xFFFF;
	sll $a1, $a1, 0x10        ; y3 <<= 16;
	addu $a1, $a1, $a0        ; y3 += x3; 
	sw $a1, VS_GP0($t0)       ; *vs_gp0 = y3;
	jr $ra 
	nop
	
# Function: DrawLine
# Purpose: Draws a single colored line to the display area 
# a0: x1, a1: y1, a2: x2, a3: y2, 16($sp): color 
DrawLine:
	li $t0, VS_IO 
	lw $t2, 16($sp)
	li $t1, VS_DRAW_LINE     ; gpu0_cmd_draw_line;
	addu $t1, $t1, $t2       ; gpu0_cmd_draw_line += color;
	sw $t1, VS_GP0($t0)      ; *vs_gpu0 - gpu0_cmd_draw_line;
	andi $a0, $a0, 0xFFFF    ; x1 &= 0xFFFF;
	sll $a1, $a1, 0x10       ; y1 <<= 16;
	addu $a1, $a1, $a0       ; y1 += x1;
	sw $a1, VS_GP0($t0)      ; *vs_gp0 = y1;
	andi $a2, $a2, 0xFFFF    ; x2 &= 0xFFFF;
	sll $a3, $a3, 0x10       ; y2 <<= 16;
	addu $a3, $a3, $a2       ; y2 += x2;
	sw $a3, VS_GP0($t0)      ; *vs_gp0 = y2;
	jr $ra 
	nop
	
# Function: DrawSemiTransLine
# Purpose: Draws a semi-transparent single colored line to the display area 
# a0: x1, a1: y1, a2: x2, a3: y2, 16($sp): color 
DrawSemiTransLine:
	li $t0, VS_IO 
	lw $t2, 16($sp)
	li $t1, VS_SEMI_TRANS_DRAW_LINE ; gpu0_cmd_draw_line;
	addu $t1, $t1, $t2       ; gpu0_cmd_draw_line += color;
	sw $t1, VS_GP0($t0)      ; *vs_gpu0 - gpu0_cmd_draw_line;
	andi $a0, $a0, 0xFFFF    ; x1 &= 0xFFFF;
	sll $a1, $a1, 0x10       ; y1 <<= 16;
	addu $a1, $a1, $a0       ; y1 += x1;
	sw $a1, VS_GP0($t0)      ; *vs_gp0 = y1;
	andi $a2, $a2, 0xFFFF    ; x2 &= 0xFFFF;
	sll $a3, $a3, 0x10       ; y2 <<= 16;
	addu $a3, $a3, $a2       ; y2 += x2;
	sw $a3, VS_GP0($t0)      ; *vs_gp0 = y2;
	jr $ra 
	nop

# Function: VS_TextureFourPointPoly
# Purpose: Draws a textured four-point polygon, a quad, to the display area using the GPU 
# a0: x1, a1: y1, a2: palette, a3: u1, 16($sp): v1, 20($sp): x2, 24($sp): y2, 28($sp): texpage, 32($sp): u2, 36($sp): v2, 40($sp): x3, 44($sp): y3, 48($sp): u3, 52($sp): v3
# 56($sp): x4, 60($sp): y4, 64($sp): u4, 68($sp): v4
VS_TextureFourPointPoly:   
	li   $t0, VS_IO
	li   $t1, VS_TEXTURE_FOUR_POINT_POLY      ; gpu0_cmd = VS_TEXTURE_FOUR_POINT_POLY;
	sw   $t1, VS_GP0($t0)                     ; *vs_gpu0 = gpu0_cmd;
	andi $a0, $a0, 0xFFFF                     ; x1 &= 0xFFFF;
	sll  $a1, $a1, 0x10                       ; y1 <<= 16;
	or   $a1, $a1, $a0                        ; y1 |= x1;
	sw   $a1, VS_GP0($t0)                     ; *vs_gpu0 = y1;
	sll  $a2, $a2, 0x10                       ; palette <<= 16;
	lhu  $a1, 16($sp)
	andi $a3, $a3, 0xFF                       ; u1 &= 0xFF; 
	andi $a1, $a1, 0xFF                       ; v1 &= 0xFF;
	sll  $a1, $a1, 0x8                        ; v1 <<= 8;
	or   $a1, $a1, $a3                        ; v1 |= u1;
	or   $a1, $a1, $a2                        ; v1 |= palette;
	sw   $a1, VS_GP0($t0)                     ; *vs_gpu0 = v1;
	lhu  $a0, 20($sp)
	lhu  $a1, 24($sp)
	andi $a0, $a0, 0xFFFF                     ; x2 &= 0xFFFF;
	sll  $a1, $a1, 0x10                       ; y2 <<= 16;
	or   $a1, $a1, $a0                        ; y2 |= x2;
	sw   $a1, VS_GP0($t0)                     ; *vs_gpu0 = y2;
	lhu  $a1, 36($sp)
	lhu  $a2, 28($sp)
	lhu  $a3, 32($sp)
	sll  $a2, $a2, 0x10                       ; texpage <<= 16;
	andi $a3, $a3, 0xFF                       ; u2 &= 0xFF; 
	andi $a1, $a1, 0xFF                       ; v2 &= 0xFF;
	sll  $a1, $a1, 0x8                        ; v2 <<= 8;
	or   $a1, $a1, $a3                        ; v2 |= u2;
	or   $a1, $a1, $a2                        ; v2 |= texpage;
	sw   $a1, VS_GP0($t0)                     ; *vs_gpu0 = v2;
	lhu  $a0, 40($sp)
	lhu  $a1, 44($sp)
	andi $a0, $a0, 0xFFFF                     ; x3 &= 0xFFFF;
	sll  $a1, $a1, 0x10                       ; y3 <<= 16;
	or   $a1, $a1, $a0                        ; y3 |= x3;
	sw   $a1, VS_GP0($t0)                     ; *vs_gpu0 = y3;
	lhu  $a3, 48($sp)
	lhu  $a1, 52($sp)
	andi $a3, $a3, 0xFF                       ; u3 &= 0xFF; 
	andi $a1, $a1, 0xFF                       ; v3 &= 0xFF;
	sll  $a1, $a1, 0x8                        ; v3 <<= 8;
	or   $a1, $a1, $a3                        ; v3 |= u3;
	sw   $a1, VS_GP0($t0)                     ; *vs_gpu0 = v3;
	lhu  $a0, 56($sp)
	lhu  $a1, 60($sp)
	andi $a0, $a0, 0xFFFF                    ; x4 &= 0xFFFF;
	sll  $a1, $a1, 0x10                      ; y4 <<= 16;
	or   $a1, $a1, $a0                       ; y4 |= x4;
	sw   $a1, VS_GP0($t0)                    ; *vs_gpu0 = y4;
	lhu  $a2, 64($sp)
	lhu  $a3, 68($sp)
	andi $a2, $a2, 0xFF                      ; u4 &= 0xFF;
	sll  $a3, $a3, 0x8                       ; v4 <<= 8;
	or   $a3, $a3, $a2                       ; v4 |= u4;
	sw   $a3, VS_GP0($t0)                    ; *vs_gpu0 = v4;
	jr $ra
	nop
	
# Function: DrawTriangle
# Purpose: Draws a monochrome triangle to the display area 
# a0: x1, a2: y1, a2: x2, a3: y1, 16($sp): x2, 20($sp): y2, 24($sp): color
DrawTriangle:
	li $t0, VS_IO 
	lw $t2, 24($sp)
	li $t1, VS_DRAW_TRIANGLE       ; gpu0_cmd = VS_DRAW_TRIANGLE;
	addu $t1, $t1, $t2             ; gpu0_cmd += color;
	sw $t1, VS_GP0($t0)            ; *vs_gpu0 = gpu0_cmd;
	andi $a0, $a0, 0xFFFF    	   ; x1 &= 0xFFFF;
	sll $a1, $a1, 0x10       	   ; y1 <<= 16;
	addu $a1, $a1, $a0       	   ; y1 += x1;
	sw $a1, VS_GP0($t0)      	   ; *vs_gp0 = y1;
	andi $a2, $a2, 0xFFFF    	   ; x2 &= 0xFFFF;
	sll $a3, $a3, 0x10       	   ; y2 <<= 16;
	addu $a3, $a3, $a2       	   ; y2 += x2;
	lw $a0, 16($sp)
	lw $a1, 20($sp)
	sw $a3, VS_GP0($t0)   		   ; *vs_gp0 = y2;
	andi $a0, $a0, 0xFFFF    	   ; x3 &= 0xFFFF;
	sll $a1, $a1, 0x10       	   ; y3 <<= 16;
	addu $a1, $a1, $a0       	   ; y3 += x3;
	sw $a1, VS_GP0($t0)      	   ; *vs_gp0 = y3;
	jr $ra 
	nop
	
# Function: DrawSemiTransTriangle
# Purpose: Draws a semi-transparent monochrome triangle to the display area 
# a0: x1, a2: y1, a2: x2, a3: y1, 16($sp): x2, 20($sp): y2, 24($sp): color
DrawSemiTransTriangle:
	li $t0, VS_IO 
	lw $t2, 24($sp)
	li $t1, VS_DRAW_SEMI_TRANS_TRIANGLE ; gpu0_cmd = VS_DRAW_TRIANGLE;
	addu $t1, $t1, $t2             		; gpu0_cmd += color;
	sw $t1, VS_GP0($t0)            		; *vs_gpu0 = gpu0_cmd;
	andi $a0, $a0, 0xFFFF    	   		; x1 &= 0xFFFF;
	sll $a1, $a1, 0x10       	   		; y1 <<= 16;
	addu $a1, $a1, $a0       	   		; y1 += x1;
	sw $a1, VS_GP0($t0)      	   		; *vs_gp0 = y1;
	andi $a2, $a2, 0xFFFF    	   		; x2 &= 0xFFFF;
	sll $a3, $a3, 0x10       	   		; y2 <<= 16;
	addu $a3, $a3, $a2       	   		; y2 += x2;
	lw $a0, 16($sp)
	lw $a1, 20($sp)
	sw $a3, VS_GP0($t0)   		   		; *vs_gp0 = y2;
	andi $a0, $a0, 0xFFFF    	   		; x3 &= 0xFFFF;
	sll $a1, $a1, 0x10       	   		; y3 <<= 16;
	addu $a1, $a1, $a0       	   		; y3 += x3;
	sw $a1, VS_GP0($t0)      	   		; *vs_gp0 = y3;
	jr $ra 
	nop
	
	
.data 
.align, 4 
KrabbyPatty:
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x85, 0x86, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x116f, 0xdd6, 0xdf7, 0xdd6, 0x11f8, 0x15fa, 0x32dc, 0x223b, 0xdd6, 0x1217, 0x1657, 0x1a76, 0x15cf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1679, 0x26be, 0x161c, 0x1a1c, 0x19fa, 0x1a1a, 0x19fa, 0x19f8, 0x15b7, 0x1195, 0x911, 0x4f0, 0x931 
	.half 0x2659, 0x15f4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x887, 0x1abc, 0x26de, 0x22be, 0x269c, 0x269d, 0x1e5c, 0x1e5c 
	.half 0x1a3b, 0x15b7, 0x1175, 0x3b1c, 0xd51, 0x4cf, 0x4f0, 0x911, 0x11b6, 0xdd3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4e8, 0x2b1e 
	.half 0x2f3f, 0x2efe, 0x2afe, 0x32dc, 0x433c, 0x229d, 0x229d, 0x1e5b, 0x19f9, 0x19f8, 0x3afb, 0x932, 0x4f0, 0x4f0, 0x4f0, 0x932, 0x15d7, 0xdf4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x4c7, 0x377f, 0x377f, 0x375f, 0x2f1e, 0x2afe, 0x26be, 0x229c, 0x269d, 0x227c, 0x227c, 0x1e3b, 0x1a19, 0x15b6, 0x1195, 0xd52, 0x910, 0x911, 0x1173, 0x1195, 0x1e18 
	.half 0x9d3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x22fa, 0x377f, 0x375e, 0x3b7f, 0x377f, 0x333e, 0x2f1f, 0x26be, 0x269d, 0x227d, 0x227c, 0x1e5b, 0x1a19, 0x19d7 
	.half 0x1195, 0x1153, 0xd52, 0xd32, 0x475d, 0x1173, 0x19b5, 0x2a9b, 0x487, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a9, 0x3bbf, 0x3b7f, 0x3b3d, 0x377f, 0x335e, 0x375f, 0x333e 
	.half 0x2afe, 0x2ade, 0x269c, 0x227c, 0x225b, 0x1e3a, 0x1e18, 0x15d6, 0x1194, 0x1173, 0x1153, 0x19b4, 0x1174, 0x1195, 0x15b7, 0x5b1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1256 
	.half 0x3b9f, 0x377f, 0x36fb, 0x377f, 0x335f, 0x375f, 0x2f1e, 0x2afe, 0x26bd, 0x3f3d, 0x229c, 0x227b, 0x1e5a, 0x1e39, 0x19f7, 0x1594, 0x1194, 0x1174, 0x1174, 0x1595, 0x15b6, 0x15b6, 0x19f9, 0x465, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f1f, 0x2f5f, 0x335f, 0x335e, 0x335f, 0x2f1e, 0x435e, 0x2f1e, 0x26bf, 0x1e5c, 0x3f1b, 0x229d, 0x227c, 0x1e3a, 0x1e39, 0x19f7, 0x3f1c, 0x19d5, 0x1174 
	.half 0x1595, 0x1195, 0x1195, 0x2238, 0x15b7, 0x16f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x12fe, 0x231e, 0x2b3e, 0x2b3e, 0x271e, 0x2b3f, 0x26dd, 0x2b1f, 0x26df, 0x229f, 0x2259, 0x26be 
	.half 0x269d, 0x227c, 0x225b, 0x19f8, 0x1595, 0x1195, 0x1174, 0x1195, 0x1195, 0x1195, 0x2237, 0x15b6, 0xdd7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa3c, 0x1abe, 0x1abe, 0x1a9d, 0x1e9e 
	.half 0x1ebf, 0x22de, 0x22de, 0x22bf, 0x22bf, 0x229f, 0x229e, 0x269d, 0x269c, 0x1e5b, 0x19d8, 0x1596, 0x1195, 0x1175, 0x1195, 0x1595, 0x1596, 0xd54, 0x1175, 0x995, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x155, 0xdda, 0xdd9, 0x11d9, 0x11fb, 0x163c, 0x165d, 0x1a7e, 0x1a7e, 0x161d, 0x1a3d, 0x1a3e, 0x1e5d, 0x1e5c, 0x1e3a, 0x19f8, 0x1196, 0x1174, 0x1174, 0x1175, 0x1195, 0x1174, 0xd54 
	.half 0xd74, 0x575, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca, 0x516, 0xd77, 0xd77, 0xd77, 0xd98, 0x11d9, 0x11f9, 0x11d9, 0xd76, 0xd77, 0x11ba, 0x11ba, 0x11ba, 0x11b9, 0x11b7 
	.half 0xd76, 0xd54, 0xd53, 0xd54, 0xd54, 0xd53, 0xd54, 0x915, 0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x224a, 0x1559, 0x976, 0x557, 0x976, 0xd97, 0xdb7, 0xd96 
	.half 0xd55, 0x955, 0x955, 0x955, 0x954, 0xd55, 0x954, 0x933, 0x533, 0x511, 0x931, 0x931, 0x912, 0xcb0, 0x2eea, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1826, 0x22a7, 0x3beb 
	.half 0x2db9, 0x6f5f, 0x673d, 0x35db, 0x14fb, 0x10f9, 0xd13, 0xd12, 0xd12, 0xd13, 0x8d4, 0x8d5, 0xd16, 0x25b6, 0x3217, 0x3e58, 0x39f9, 0x295c, 0x14be, 0x81b, 0x873, 0x42cd, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x12a2, 0x27a8, 0x2b89, 0x2b68, 0x12f3, 0x3eb5, 0x5338, 0x465c, 0x1d1d, 0x149d, 0xc32, 0xc4c, 0x106d, 0xc52, 0x839, 0x147d, 0x317e, 0x62fe, 0xffff, 0x735f, 0x4e3f, 0x251d 
	.half 0x109a, 0x21b1, 0x2f4b, 0x3389, 0x27a8, 0x0, 0x0, 0x0, 0x0, 0x1583, 0x0, 0x1664, 0x2f8a, 0x2747, 0x2b67, 0x3bab, 0x43cf, 0x3b2e, 0x36ee, 0x372c, 0x378b, 0x1a09, 0x150d, 0x112d, 0x1992 
	.half 0x2e18, 0x3ab7, 0x4735, 0x3b8e, 0x2f2b, 0x26ec, 0x1f0e, 0x378b, 0x47ef, 0x370e, 0x2669, 0x1ae5, 0x1be4, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe62, 0x2f88, 0x2b46, 0x2f70, 0x22b4, 0x14eb, 0x18cb 
	.half 0x14cb, 0x14ea, 0x22e5, 0x2f88, 0x2747, 0x2346, 0x37cb, 0x4ff1, 0x4bf0, 0x47ef, 0x3bcd, 0x2b88, 0x2345, 0x2745, 0x1f25, 0x2305, 0x2266, 0xe2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x160
	.half 0x1ae3, 0x1a0a, 0x377c, 0x1db2, 0x210d, 0x1d0d, 0x212d, 0x1d0d, 0x252f, 0x1a26, 0x33a9, 0x2b69, 0x2b47, 0x2b47, 0x222a, 0x1d8a, 0x218b, 0x218c, 0x25ef, 0x439a, 0x2f31, 0x26e8, 0x22e3, 0x2723, 0x16a7 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc43, 0x0, 0x0, 0x2abd, 0x1df6, 0x1970, 0x1d2d, 0x18ea, 0x14a9, 0x18cb, 0x1509, 0x22a4, 0x2b45, 0x26e4, 0x1948, 0x18ac, 0x14ab, 0x18cb, 0x18cb 
	.half 0x1489, 0x1d0c, 0x3f5d, 0x21f3, 0x19b2, 0x2278, 0x1e7c, 0x4a8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x129, 0x227b, 0x269a, 0x26db, 0x269a, 0x2258, 0x1e16, 0x1df4, 0x19b3, 0x156f 
	.half 0x158d, 0x154e, 0x1530, 0x154f, 0x154e, 0x194f, 0x1971, 0x1dd5, 0x2237, 0x2279, 0x26bb, 0x26bb, 0x229a, 0x1e5c, 0x12a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdd8, 0x19f9 
	.half 0x1a38, 0x227a, 0x269b, 0x2abc, 0x2afc, 0x2efd, 0x2f1e, 0x2efd, 0x2afd, 0x2afd, 0x2afd, 0x2afd, 0x2afd, 0x2afd, 0x2afc, 0x26db, 0x26ba, 0x229a, 0x1e59, 0x1a18, 0x1a1a, 0x4a8, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0xdf8, 0x15d8, 0x15d8, 0x1a18, 0x227a, 0x26bb, 0x2efc, 0x2efd, 0x2efc, 0x2afc, 0x2adc, 0x2adb, 0x26bb, 0x26bb, 0x229a, 0x227a, 0x1a38, 0x15f7, 0x11d6, 0xd96
	.half 0x11b7, 0x15d8, 0xdf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18f, 0x11d8, 0x11b7, 0x15f7, 0x1e59, 0x269a, 0x2abb, 0x2abb, 0x26bb, 0x269a, 0x229a, 0x2279, 0x1e59 
	.half 0x1e59, 0x1a18, 0x11f7, 0x11b6, 0xd75, 0xd75, 0x1196, 0x11b7, 0x9b5, 0xeb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x86, 0x931, 0x9d5, 0x1a39, 0x227a 
	.half 0x269b, 0x26bb, 0x269a, 0x227a, 0x1e59, 0x1e59, 0x1a38, 0x1a18, 0x15f7, 0x11d6, 0x1196, 0xd96, 0xd95, 0x573, 0x4ec, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x4ea, 0x11d2, 0x1635, 0x1eb9, 0x1eb9, 0x1a98, 0x1678, 0x1657, 0x1236, 0xdf5, 0x9d5, 0x593, 0x14f, 0xcee, 0x86, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0