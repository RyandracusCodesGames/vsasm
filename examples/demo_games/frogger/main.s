#-----------------------------------------------------------
# VideoStation Assembler
# (C) 2025 Ryandracus Chapman
#-----------------------------------------------------------
# Milestone Program 3: Frogger
#-----------------------------------------------------------
# PlayStation Graphics Program 14: 
# An arcade classic and a hallmark of video game history,
# Frogger's objective is to guide the frog, the character,
# safely to a home at the top of the screen avoiding ongoing
# traffic and alligator and turtle infested waters.
#-----------------------------------------------------------
# Video Mode: 256x240 NTSC 16-BIT COLOR
#-----------------------------------------------------------

VS_IO equ 0x1F800000
VS_GP0 equ 0x1810 
VS_GP1 equ 0x1814 
VS_FILL_SCREEN equ 0x2000000
VS_CPU_TO_VRAM equ 0xA0000000
VS_VRAM_TO_VRAM equ 0x80000000
VS_GPU_DMA equ 0x10A0
VS_GPU_BCR equ 0x10A4
VS_GPU_CHCR equ 0x10A8
VS_CMD_STAT_READY equ 0x4000000
VS_DMA_ENABLE equ 0x1000000
VS_TEXTURE_FOUR_POINT_POLY equ 0x2D000000

VS_MODE equ 0

VS_DISPLAY_X1 equ 0 
VS_DISPLAY_Y1 equ 240 

VS_WIDTH equ 256 
VS_HEIGHT equ 240

VS_RIGHT_BOUNDS equ 236
VS_DOWN_BOUNDS equ 218

; GAME OBJECT'S GPU VRAM X,Y COORDINATES AND WIDTH/HEIGHTS
VS_PBIMGX equ 256 
VS_PBIMGY equ 0
VS_PBIMGW equ 18 
VS_PBIMGH equ 18

VS_FRIMGX1 equ 320
VS_FRIMGY1 equ 0
VS_FRIMGX2 equ 384
VS_FRIMGY2 equ 0
VS_FRIMGX3 equ 448
VS_FRIMGY3 equ 0

VS_FRLIMGX1 equ 320
VS_FRLIMGY1 equ 64
VS_FRLIMGX2 equ 384
VS_FRLIMGY2 equ 64
VS_FRLIMGX3 equ 448
VS_FRLIMGY3 equ 64

VS_NCIMGX1  equ 256 
VS_NCIMGY1  equ 256

VS_FRIMGW equ 22
VS_FRIMGH equ 20

VS_NCIMGW equ 24
VS_NCIMGH equ 23

VS_BDIMGX  equ 320 
VS_BDIMGY  equ 256

VS_BDIMGW equ 22 
VS_BDIMGH equ 18

VS_LOIMGX  equ 384 
VS_LOIMGY  equ 256

VS_LOIMGW equ 51
VS_LOIMGH equ 24

; GAME VARIABLES

VS_PLAYERX equ 120 
VS_PLAYERY equ 210
VS_VELOCITY equ 1 
VS_PLAYER_LIVES equ 5

VS_NC1_X equ 10 
VS_NC1_Y equ 138

VS_NC2_X equ 75 
VS_NC2_Y equ 138

VS_BD1_X equ -30 
VS_BD1_Y equ 170

VS_BD2_X equ 60 
VS_BD2_Y equ 170

VS_BD3_X equ 150 
VS_BD3_Y equ 170

VS_BD4_X equ 240 
VS_BD4_Y equ 170

VS_LO1_X equ 0 
VS_LO1_Y equ 100

VS_LO2_X equ 100 
VS_LO2_Y equ 20

VS_LO3_X equ 200 
VS_LO3_Y equ 100

VS_NC1_RIGHT_BOUNDS equ 260
VS_BD_RIGHT_BOUNDS equ 300
VS_LO_TOP_BOUNDS equ 20
VS_LO_BOTTOM_BOUNDS equ 100

; vs_gp0 = (unsigned long*)(vs_io_addr + vs_gp0);
; vs_gp1 = (unsigned long*)(vs_io_addr + vs_gp1);

InitVideo:
	li $t0, VS_IO             ; vs_io_addr = (unsigned long*)0x1F800000;
	sw $zero, VS_GP1($t0)     ; *vs_gpu1 = vs_cmd_gpu_reset;
	li $t1, 0x3000000         ; gpu1_cmd = vs_cmd_display_enable;
	sw $t1, VS_GP1($t0)       ; *vs_gp1 = gpu1_cmd;
	li $t1, 0x4000000         ; gpu1_cmd = vs_cmd_dma_off;
	sw $t1, VS_GP1($t0)       ; *vs_gp1 = gpu1_cmd;
	li $t1, 0x8000000         ; vs_cmd_display_mode = 0x8000000 + mode;
	addiu $t1, $t1, VS_MODE   ; vs_cmd_display_enable += mode;
	li   $t1, 0x05000000      ; gpu1_cmd = vs_cmd_display_area;
	sw   $t1, VS_GP1($t0)     ; *gpu1 = gpu1_cmd;
	li $t5, 0xC4E24E          ; vs_hrange = 0xC4E24E;
	li $t6, 0x040010          ; vs_vrange = 0x040010;
	li $t1, 0x06000000        ; vs_cmd_horizontal_range = 0x6000000
	addu $t1, $t1, $t5        ; vs_cmd_horizontal_range += vs_hrange;
	sw $t1, VS_GP1($t0)       ; *vs_gp1 = vs_cmd_horizontal_range;
	li $t1, 0x07000000        ; vs_cmd_vertical_range = 0x7000000;
	addu $t1, $t1, $t6        ; vs_cmd_vertical_range += vs_vrange;
	sw $t1, VS_GP1($t0)       ; *vs_gpu1 = vs_cmd_vertical_range;
	li $t1, 0xE1000000        ; gpu0_cmd = vs_cmd_draw_mode;
	addi $t1, $t1, 0x000508   ; gpu0_cmd += 0x000508;  
	sw   $t1, VS_GP0($t0)     ; *vs_gpu0 = gpu0_cmd;
	li $t1, 0xE2000000        ; gpu0_cmd = vs_cmd_texture_window;
	sw   $t1, VS_GP0($t0)     ; *vs_gpu0 = gpu0_cmd;
	li $t1, 0xE3000000        ; gpu0_cmd = vs_cmd_display_x1y1;
	li $t2, VS_DISPLAY_X1     ; x1 = VS_DISPLAY_X1;
	li $t3, VS_DISPLAY_Y1     ; y1 = VS_DISPLAY_Y1;
	andi $t2, $t2, 0x3FF      ; x1 &= 0x3FF;
	andi $t3, $t3, 0x1FF      ; y1 &= 0x1FF;
	sll $t3, $t3, 0x0A        ; y1 <<= 10;
	addu $t3, $t3, $t2        ; y1 += x1;
	addu $t1, $t1, $t3        ; gpu0_cmd += y1;
	sw   $t1, VS_GP0($t0)     ; *vs_gpu0 = gpu0_cmd;
	li $t1, 0xE4000000        ; gpu0_cmd = vs_cmd_display_x2y2;
	li $t2, VS_DISPLAY_X1     ; x2 = VS_DISPLAY_X1;
	li $t3, VS_DISPLAY_Y1     ; y2 = VS_DISPLAY_Y1;
	addiu $t2, $t2, VS_WIDTH  ; x2 += width;
	addiu $t3, $t3, VS_HEIGHT ; y2 += height;
	andi $t2, $t2, 0x3FF      ; x2 &= 0x3FF;
	andi $t3, $t3, 0x1FF      ; y2 &= 0x1FF;
	sll $t3, $t3, 0x0A        ; y2 <<= 10;
	addu $t3, $t3, $t2        ; y2 += x2;
	addu $t1, $t1, $t3        ; gpu0_cmd += y2;
	sw   $t1, VS_GP0($t0)     ; *vs_gpu0 = gpu0_cmd;
	li   $t1, 0xE5000000      ; gpu0_cmd = gpu0_cmd_draw_offset;
	li $t2, VS_DISPLAY_X1     ; x1 = VS_DISPLAY_X1;
	li $t3, VS_DISPLAY_Y1     ; y1 = VS_DISPLAY_Y1;
	sll  $t3, $t3, 11         ; y1 <<= 11;
	addu $t3, $t3, $t2        ; y1 += x;
	addu $t1, $t1, $t3        ; gpu0_cmd += y;
	sw   $t1, VS_GP0($t0)     ; *gpu0 = gpu0_cmd;
	li   $t1, 0x03000000      ; cmd = gpu1_cmd_display_enable;
	sw   $t1, VS_GP1($t0)     ; *vs_gpu1 = cmd;
	li $t2, 0x1F8010F0        ; dma_address = 0x1F8010F0;
	li $t1, 0x300             ; dma_priority = 0x300;
	sw $t1, 0($t2)            ; *dma_address = dma_priority;
	li $t1, 0x800             ; gpu_dma_enable = 0x800;
	sw $t1, 0($t2)            ; *dma_address = gpu_dma_enable;
	addi $sp, $sp, -100
UploadGameObjectsToVram:
	li $a0, VS_PBIMGX         ; x = VS_PBIMGX;
	li $a1, VS_PBIMGY         ; y = VS_PBIMGY;
	li $a2, VS_PBIMGW         ; w = VS_PBIMGW;
	li $a3, VS_PBIMGH         ; h = VS_PBIMGH;
	la $t1, PurpleBlock       ; data = PurpleBlock;
	sw $t1, 16($sp)
	jal VS_TransferImageDataToVram
	nop
	la $t1, FrogUpAnim        ; anim_addr = FrogUpAnim;
	la $t2, FrogUp1           ; anim = FrogUp1;
	sw $t2, 0($t1)            ; *anim_addr = anim;
	la $t2, FrogUp2           ; anim = FrogUp2;
	sw $t2, 4($t1)            ; *(anim_addr + 4) = anim;
	la $t2, FrogUp3           ; anim = FrogUp3;
	sw $t2, 8($t1)            ; *(anim_addr + 8) = anim;
	la $t1, FrogLeftAnim      ; anim_addr = FrogLeftAnim;
	la $t2, FrogLeft1         ; anim = FrogLeft1;
	sw $t2, 0($t1)            ; *anim_addr = anim;
	la $t2, FrogLeft2         ; anim = FrogLeft2;
	sw $t2, 4($t1)            ; *(anim_addr + 4) = anim;
	la $t2, FrogLeft3         ; anim = FrogLeft3;
	sw $t2, 8($t1)            ; *(anim_addr + 8) = anim;
	li $a0, VS_FRIMGX1        ; x = VS_FRIMGX1;
	li $a1, VS_FRIMGY1        ; y = VS_FRIMGY1;
	li $a2, VS_FRIMGW         ; w = VS_FRIMGW;
	li $a3, VS_FRIMGH         ; h = VS_FRIMGH;
	la $t1, FrogUp1           ; data = FrogUp1;
	sw $t1, 16($sp)
	jal VS_TransferImageDataToVram
	nop
	li $a0, VS_FRIMGX2        ; x = VS_FRIMGX2;
	li $a1, VS_FRIMGY2        ; y = VS_FRIMGY2;
	li $a2, VS_FRIMGW         ; w = VS_FRIMGW;
	li $a3, VS_FRIMGH         ; h = VS_FRIMGH;
	la $t1, FrogUp2           ; data = FrogUp2;
	sw $t1, 16($sp)
	jal VS_TransferImageDataToVram
	nop
	li $a0, VS_FRIMGX3        ; x = VS_FRIMGX3;
	li $a1, VS_FRIMGY3        ; y = VS_FRIMGY3;
	li $a2, VS_FRIMGW         ; w = VS_FRIMGW;
	li $a3, VS_FRIMGH         ; h = VS_FRIMGH;
	la $t1, FrogUp3           ; data = FrogUp3;
	sw $t1, 16($sp)
	jal VS_TransferImageDataToVram
	nop
	li $a0, VS_FRLIMGX1       ; x = VS_FRLIMGX1;
	li $a1, VS_FRLIMGY1       ; y = VS_FRLIMGY1;
	li $a2, VS_FRIMGW         ; w = VS_FRIMGW;
	li $a3, VS_FRIMGH         ; h = VS_FRIMGH;
	la $t1, FrogLeft1         ; data = FrogLeft1;
	sw $t1, 16($sp)
	jal VS_TransferImageDataToVram
	nop
	li $a0, VS_FRLIMGX2       ; x = VS_FRIMGX2;
	li $a1, VS_FRLIMGY2       ; y = VS_FRIMGY2;
	li $a2, VS_FRIMGW         ; w = VS_FRIMGW;
	li $a3, VS_FRIMGH         ; h = VS_FRIMGH;
	la $t1, FrogLeft2         ; data = FrogLeft2;
	sw $t1, 16($sp)
	jal VS_TransferImageDataToVram
	nop
	li $a0, VS_FRLIMGX3       ; x = VS_FRIMGX3;
	li $a1, VS_FRLIMGY3       ; y = VS_FRIMGY3;
	li $a2, VS_FRIMGW         ; w = VS_FRIMGW;
	li $a3, VS_FRIMGH         ; h = VS_FRIMGH;
	la $t1, FrogLeft3         ; data = FrogLeft3;
	sw $t1, 16($sp)
	jal VS_TransferImageDataToVram
	nop
	li $a0, VS_NCIMGX1       ; x = VS_NCIMGX1;
	li $a1, VS_NCIMGY1       ; y = VS_NCIMGY1;
	li $a2, VS_NCIMGW        ; w = VS_NCIMGW;
	li $a3, VS_NCIMGH        ; h = VS_NCIMGH;
	la $t1, Nascar1          ; data = Nascar1;
	sw $t1, 16($sp)
	jal VS_TransferImageDataToVram
	nop
	li $a0, VS_BDIMGX      ; x = VS_BDIMGX;
	li $a1, VS_BDIMGY      ; y = VS_BDIMGY;
	li $a2, VS_BDIMGW      ; w = VS_BDIMGW;
	li $a3, VS_BDIMGH      ; h = VS_BDIMGH;
	la $t1, Bulldozer      ; data = Bulldozer;
	sw $t1, 16($sp)
	jal VS_TransferImageDataToVram
	nop
	li $a0, VS_LOIMGX      ; x = VS_LOIMGX;
	li $a1, VS_LOIMGY      ; y = VS_LOIMGY;
	li $a2, VS_LOIMGW      ; w = VS_LOIMGW;
	li $a3, VS_LOIMGH      ; h = VS_LOIMGH;
	la $t1, Log            ; data = Log;
	sw $t1, 16($sp)
	jal VS_TransferImageDataToVram
	nop
InitPad: 
    li $t1,0x15
    li $a0, 0x20000001
    li $t2,0xB0
    li $a1, VS_IO           ; Set Pad Buffer Address To Automatically Update Each Frame
    jalr $t2                ; Jump To BIOS Routine OutdatedPadInitAndStart()
    nop ; Delay Slot
	li $s0, VS_IO
	sw $zero, 8($s0) 
	sw $zero, 12($s0) 
	li $t0, VS_PLAYERX        ; x = VS_PLAYERX;
	sw $t0, 16($s0)
	li $t1, VS_PLAYERY        ; y = VS_PLAYERY;
	sw $t1, 20($s0)
	sw $zero, 0($t0)
	la $t2, NCObj1
	li $t0, VS_NC1_X          ; x = VS_NC1_X;
	li $t1, VS_NC1_Y          ; y = VS_NC1_Y;
	sw $t0, 0($t2) 
	sw $t1, 4($t2)
	la $t2, NCObj2
	li $t0, VS_NC2_X          ; x = VS_NC2_X;
	li $t1, VS_NC2_Y          ; y = VS_NC2_Y;
	sw $t0, 0($t2) 
	sw $t1, 4($t2)
	la $t3, BDObjContainer
	la $t2, BDObj1
	li $t0, VS_BD1_X          ; x = VS_BD1_X;
	li $t1, VS_BD1_Y          ; y = VS_BD1_Y;
	sw $t0, 0($t2) 
	sw $t1, 4($t2)
	sw $t2, 0($t3)
	la $t2, BDObj2
	li $t0, VS_BD2_X          ; x = VS_BD2_X;
	li $t1, VS_BD2_Y          ; y = VS_BD2_Y;
	sw $t0, 0($t2) 
	sw $t1, 4($t2)
	sw $t2, 4($t3)
	la $t2, BDObj3
	li $t0, VS_BD3_X          ; x = VS_BD3_X;
	li $t1, VS_BD3_Y          ; y = VS_BD3_Y;
	sw $t0, 0($t2) 
	sw $t1, 4($t2)
	sw $t2, 8($t3)
	la $t2, BDObj4
	li $t0, VS_BD4_X          ; x = VS_BD4_X;
	li $t1, VS_BD4_Y          ; y = VS_BD4_Y;
	sw $t0, 0($t2) 
	sw $t1, 4($t2)
	sw $t2, 12($t3)
	la $t2, LOObj1
	li $t0, VS_LO1_X          ; x = VS_LO1_X;
	li $t1, VS_LO1_Y          ; y = VS_LO1_Y;
	sw $t0, 0($t2) 
	sw $t1, 4($t2)
	la $t2, LOObj2
	li $t0, VS_LO2_X          ; x = VS_LO2_X;
	li $t1, VS_LO2_Y          ; y = VS_LO2_Y;
	sw $t0, 0($t2) 
	sw $t1, 4($t2)
	la $t2, LOObj3
	li $t0, VS_LO3_X          ; x = VS_LO3_X;
	li $t1, VS_LO3_Y          ; y = VS_LO3_Y;
	sw $t0, 0($t2) 
	sw $t1, 4($t2)
Input:
PRESSRIGHT:
    lw $t0, 8($s0)
    nop 
    andi $t0, $t0, 0x2000
    beqz $t0, PRESSLEFT         ; if(!PRESSRIGHT) { goto PRESSLEFT; }
    nop 
    lw $t0, 16($s0)
    nop
    addi $t0, $t0, VS_VELOCITY  ; x += VS_VELOCITY;
    sw $t0, 16($s0)
    li $t1, VS_RIGHT_BOUNDS 
	bgt $t0, $t1, BoundPlayerRight    ; if(x > VS_RIGHT_BOUNDS 0) { x = VS_RIGHT_BOUNDS; }
	nop
	andi $t0, $t0, 0x0C         ; anim_cycle = x & 12;
	bnez $t0, FillScreen        ; if(anim_cycle) { goto FillScreen; }
	nop
    la $t1, FrogState           ; state = FrogState;
	li $t2, 0x3                 ; right_state = 3;
	sw $t2, 0($t1)              ; *state = right_state;
	la $t0, FrogLeftCounter     ; counter = FrogLeftCounter;
	lw $t1, 0($t0)              ; count = *counter;
	nop
	addi $t1, $t1, 0x1          ; count += 1;
	li   $t2, 3
	div  $t1, $t2               ; count = count % 3;
	mfhi $t1 
	sw $t1, 0($t0)              ; *counter = count;
    nop
PRESSLEFT:
    lw $t0, 8($s0)
    nop 
    andi $t0, $t0, 0x8000
    beqz $t0, PRESSUP           ; if(!PRESSLEFT) { goto PRESSUP; }
    nop 
    lw $t0, 16($s0)
    nop
    subi $t0, $t0, VS_VELOCITY  ; x -= VS_VELOCITY;
    sw $t0, 16($s0)
	blez $t0, BoundPlayerLeft   ; if(x <= 0) { goto BoundPlayerLeft; }
	nop
	andi $t0, $t0, 0x0C         ; anim_cycle = x & 12;
	bnez $t0, FillScreen        ; if(anim_cycle) { goto FillScreen; }
	nop
    la $t1, FrogState           ; state = FrogState;
	li $t2, 0x2                 ; left_state = 2;
	sw $t2, 0($t1)              ; *state = left_state;
	la $t0, FrogLeftCounter     ; counter = FrogLeftCounter;
	lw $t1, 0($t0)              ; count = *counter;
	nop
	addi $t1, $t1, 0x1          ; count += 1;
	li   $t2, 3
	div  $t1, $t2
	mfhi $t1                    ; count = count % 3;
	sw $t1, 0($t0)              ; *counter = count;
    nop
PRESSUP:
    lw $t0, 8($s0)
    nop 
    andi $t0, $t0, 0x1000
    beqz $t0, PRESSDOWN         ; if(!PRESSUP) { goto PRESSDOWN; }
    nop 
    lw $t0, 20($s0)          
    nop
    subi $t0, $t0,  VS_VELOCITY ; y -= VS_VELOCITY;
    sw $t0, 20($s0) 
	blez $t0, BoundPlayerUp     ; if(y <= 0) { goto BoundPlayerUp; }
	nop
	andi $t0, $t0, 0x0C         ; anim_cycle = y & 12;
	la $t1, FrogState           ; state = FrogState;
	sw $zero, 0($t1)            ; *state = 0;
	bnez $t0, PRESSDOWN         ; if(anim_cycle) { goto PRESSDOWN; }
	nop
	la $t0, FrogUpCounter       ; counter = FrogLeftCounter;
	lw $t1, 0($t0)              ; count = *counter;
	nop
	addi $t1, $t1, 0x1          ; count += 1;
	li   $t2, 3
	div  $t1, $t2
	mfhi $t1                    ; count = count % 3;
	sw $t1, 0($t0)              ; *counter = count;
    nop
PRESSDOWN:
    lw $t0, 8($s0)
    nop 
    andi $t0, $t0, 0x4000
    beqz $t0, FillScreen       ; if(!PRESSDOWN){ goto FillScreen; }
    nop 
    lw $t0, 20($s0)
    nop
    addi $t0, $t0, VS_VELOCITY ; y += VS_VELOCITY;
    sw $t0, 20($s0)
	li $t1, VS_DOWN_BOUNDS 
	bgt $t0, $t1, BoundPlayerDown  ; if(y > VS_DOWN_BOUNDS) { y = VS_DOWN_BOUNDS; }
	nop
    andi $t0, $t0, 0x0C        ; anim_cycle = y & 12; 
	la $t1, FrogState          ; state = FrogState;
	li $t2, 0x1                ; down_state = 0x1;
	sw $t2, 0($t1)             ; *state = down_state;
	bnez $t0, FillScreen       ; if(anim_cycle) { goto FillScreen; }
	nop
	la $t0, FrogUpCounter      ; counter = FrogUpCounter;
	lw $t1, 0($t0)             ; count = *counter;
	nop
	addi $t1, $t1, 0x1         ; count += 1;
	li   $t2, 3
	div  $t1, $t2
	mfhi $t1                   ; count % 3;
	sw $t1, 0($t0)             ; *counter = count;
    nop
FillScreen:
	li $t1, VS_FILL_SCREEN    ; gpu0_cmd = VS_FILL_SCREEN;
	li $t2, 0x470000          ; color = 0x470000;
	addu $t1, $t1, $t2        ; gpu0_cmd += color;
	sw $t1, VS_GP0($s0)       ; *vs_gpu0 = gpu0_cmd;
	li $t1, VS_DISPLAY_X1     ; x1 = VS_DISPLAY_X1;
	li $t2, VS_DISPLAY_Y1     ; y1 = VS_DISPLAY_Y1;
	andi $t1, $t1, 0xFFFF     ; x1 &= 0xFFFF;
	sll $t2, $t2, 0x10        ; y1 <<= 16;
	addu $t2, $t2, $t1        ; y1 += x1; 
	sw $t2, VS_GP0($s0)       ; *vs_gp0 = y1;
	li $t2, VS_HEIGHT
	sra $t2, $t2, 0x1         ; height /= 2;
	andi $t2, $t2, 0xFFFF     ; height &= 0xFFFF;
	sll $t2, $t2, 0x10        ; height <<= 16;
	li $t3, VS_WIDTH
	andi $t3, $t3, 0xFFFF     ; width &= 0xFFFF;
	addu $t2, $t2, $t3        ; height += width; 
	sw $t2, VS_GP0($s0)       ; *vs_gp0 = height;
	jal DMASync
	nop 
	li $t1, VS_FILL_SCREEN    ; gpu0_cmd = VS_FILL_SCREEN;
	sw $t1, VS_GP0($s0)       ; *vs_gpu0 = gpu0_cmd;
	li $t1, VS_DISPLAY_X1     ; x1 = VS_DISPLAY_X1;
	li $t2, VS_DISPLAY_Y1     ; y1 = VS_DISPLAY_Y1;
	li $t3, VS_HEIGHT
	sra $t3, $t3, 0x1
	addu $t2, $t2, $t3        ; y1 += VS_HEIGHT / 2;
	andi $t1, $t1, 0xFFFF     ; x1 &= 0xFFFF;
	sll $t2, $t2, 0x10        ; y1 <<= 16;
	addu $t2, $t2, $t1        ; y1 += x1; 
	sw $t2, VS_GP0($s0)       ; *vs_gp0 = y1;
	li $t2, VS_HEIGHT
	sra $t2, $t2, 0x1         ; height /= 2;
	andi $t2, $t2, 0xFFFF     ; height &= 0xFFFF;
	sll $t2, $t2, 0x10        ; height <<= 16;
	li $t3, VS_WIDTH
	andi $t3, $t3, 0xFFFF     ; width &= 0xFFFF;
	addu $t2, $t2, $t3        ; height += width; 
	sw $t2, VS_GP0($s0)       ; *vs_gp0 = height;
	jal DMASync
	nop
TexturePurleGrassBlocks:
	li $a0, 0x2 
	li $a1, 0x1 
	li $a2, VS_PBIMGX 
	li $a3, VS_PBIMGY
	jal VS_GetTexturePage
	nop
	li $t7, 240
TextureBottomPurpleBlocks:
	move $a0, $t7
	li $a1, 195
	move $a2, $v0
	jal VS_TexturePurpleBlock
	nop
	bgtz $t7, TextureBottomPurpleBlocks
	subi $t7, $t7, 0x10
	li $t7, 240
TextureTopPurpleBlocks:
	move $a0, $t7
	li $a1, 118
	move $a2, $v0
	jal VS_TexturePurpleBlock
	nop
	bgtz $t7, TextureTopPurpleBlocks
	subi $t7, $t7, 0x10
TextureLog:
	li $a0, 0x2 
	li $a1, 0x1 
	li $a2, VS_LOIMGX
	li $a3, VS_LOIMGY
	jal VS_GetTexturePage
	nop
	la $t0, LOObj1
	lw $a0, 0($t0)
	lw $a1, 4($t0)
	move $a2, $v0
	jal VS_TextureLog
	nop
	la $t0, LOObj2
	lw $a0, 0($t0)
	lw $a1, 4($t0)
	move $a2, $v0
	jal VS_TextureLog
	nop
	la $t0, LOObj3
	lw $a0, 0($t0)
	lw $a1, 4($t0)
	move $a2, $v0
	jal VS_TextureLog
	nop
TextureFrogger:
	la $t1, FrogState
	lw $t1, 0($t1)
	nop 
	beqz $t1, TextureFroggerUp
	li $t2, 0x1 
	beq $t1, $t2, TextureFroggerDown
	li $t2, 0x2 
	beq $t1, $t2, TextureFroggerLeft
	li $t2, 0x3
	beq $t1, $t2, TextureFroggerRight 
	nop
TextureFroggerUp:
	li $a0, 0x2 
	li $a1, 0x1 
	li $a2, VS_FRIMGX1 
	la $t1, FrogUpCounter
	lw $t2, 0($t1)
	nop 
	sll $t2, $t2, 0x6 
	addu $a2, $a2, $t2
	li $a3, VS_FRIMGY1
	jal VS_GetTexturePage
	nop
	lw $a0, 16($s0)
	lw $a1, 20($s0)
	move $a2, $v0
	jal VS_TextureFrogger
	nop
	b TextureNascar
	nop
TextureFroggerLeft:
	li $a0, 0x2 
	li $a1, 0x1 
	li $a2, VS_FRLIMGX1 
	la $t1, FrogLeftCounter
	lw $t2, 0($t1)
	nop 
	sll $t2, $t2, 0x6 
	addu $a2, $a2, $t2
	li $a3, VS_FRLIMGY1
	jal VS_GetTexturePage
	nop
	lw $a0, 16($s0)
	lw $a1, 20($s0)
	move $a2, $v0
	jal VS_TextureLeftFrogger
	nop
	b TextureNascar
	nop
TextureFroggerRight:
	li $a0, 0x2 
	li $a1, 0x1 
	li $a2, VS_FRLIMGX1 
	la $t1, FrogLeftCounter
	lw $t2, 0($t1)
	nop 
	sll $t2, $t2, 0x6 
	addu $a2, $a2, $t2
	li $a3, VS_FRLIMGY1
	jal VS_GetTexturePage
	nop
	lw $a0, 16($s0)
	lw $a1, 20($s0)
	move $a2, $v0
	jal VS_TextureRightFrogger
	nop
	b TextureNascar
	nop
TextureFroggerDown:
	li $a0, 0x2 
	li $a1, 0x1 
	li $a2, VS_FRIMGX1 
	la $t1, FrogUpCounter
	lw $t2, 0($t1)
	nop 
	sll $t2, $t2, 0x6 
	addu $a2, $a2, $t2
	li $a3, VS_FRIMGY1
	jal VS_GetTexturePage
	nop
	lw $a0, 16($s0)
	lw $a1, 20($s0)
	move $a2, $v0
	jal VS_TextureVFlipFrogger
	nop
TextureNascar:
	li $a0, 0x2 
	li $a1, 0x1 
	li $a2, VS_NCIMGX1
	li $a3, VS_NCIMGY1
	jal VS_GetTexturePage
	nop
	la $t0, NCObj1
	lw $a0, 0($t0)
	lw $a1, 4($t0)
	move $a2, $v0
	jal VS_TextureNascar1
	nop
	la $t0, NCObj2
	lw $a0, 0($t0)
	lw $a1, 4($t0)
	move $a2, $v0
	jal VS_TextureNascar1
	nop
TextureBulldozer:
	li $a0, 0x2 
	li $a1, 0x1 
	li $a2, VS_BDIMGX
	li $a3, VS_BDIMGY
	jal VS_GetTexturePage
	nop
	la $t0, BDObj1
	lw $a0, 0($t0)
	lw $a1, 4($t0)
	move $a2, $v0
	jal VS_TextureBulldozer
	nop
	la $t0, BDObj2
	lw $a0, 0($t0)
	lw $a1, 4($t0)
	move $a2, $v0
	jal VS_TextureBulldozer
	nop
	nop
	la $t0, BDObj3
	lw $a0, 0($t0)
	lw $a1, 4($t0)
	move $a2, $v0
	jal VS_TextureBulldozer
	nop
	nop
	la $t0, BDObj4
	lw $a0, 0($t0)
	lw $a1, 4($t0)
	move $a2, $v0
	jal VS_TextureBulldozer
	nop
BufferSwap:
	li $t1, VS_VRAM_TO_VRAM ; gpu0_cmd = VS_VRAM_TO_VRAM;
	sw $t1, VS_GP0($s0)     ; *vs_gp0 = gpu0_cmd;
	li $t1, VS_DISPLAY_X1   ; x1 = VS_DISPLAY_X1;
	li $t2, VS_DISPLAY_Y1   ; y1 = VS_DISPLAY_Y1;
	andi $t1, $t1, 0xFFFF   ; x1 &= 0xFFFF;
	sll $t2, $t2, 0x10      ; y1 <<= 16;
	addu $t2, $t2, $t1      ; y1 += x1;
	sw $t2, VS_GP0($s0)     ; *vs_gp0 = y1;
	sw $zero, VS_GP0($s0)   ; x2 = 0; y2 = 0; *vs_gp0 = y2;
	li $t1, VS_WIDTH        ; w = VS_WIDTH;
	li $t2, VS_HEIGHT       ; h = VS_HEIGHT;
	andi $t1, $t1, 0xFFFF   ; w &= 0xFFFF;
	sll $t2, $t2, 0x10      ; h <<= 16;
	addu $t2, $t2, $t1      ; h += w;
	sw $t2, VS_GP0($s0)     ; *vs_gp0 = h;
	jal DMASync
	nop
DetectCollision:
	lw $a0, 16($s0)         ; x1 = x;
	lw $a1, 20($s0)         ; y1 = y;
	li $a2, VS_FRIMGW       ; w1 = VS_FRIMGW;
	li $a3, VS_FRIMGH       ; h1 = VS_FRIMGH;
	la $t0, NCObj1
	lw $t1, 0($t0)          ; x2 = VS_NC1_X 
	nop
	sw $t1, 16($sp)
	lw $t1, 4($t0)          ; y2 = VS_NC1_Y 
	nop
	sw $t1, 20($sp)
	li $t1, VS_NCIMGW       ; w2 = VS_NCIMGW;
	sw $t1, 24($sp)
	li $t1, VS_NCIMGH       ; h2 = VS_NCIMGH;
	sw $t1, 28($sp)
	jal DetectAABBCollision
	nop
	li $t0, 0x1 
	beq $v0, $t0, ResetFrogger ; if(DetectAABBCollisionResult) { goto ResetFrogger; }
	nop
	la $t0, NCObj2
	lw $t1, 0($t0)          ; x2 = VS_NC2_X; 
	nop
	sw $t1, 16($sp)
	lw $t1, 4($t0)          ; y2 = VS_NC2_Y; 
	nop
	sw $t1, 20($sp)
	li $t1, VS_NCIMGW       ; w2 = VS_NCIMGW;
	sw $t1, 24($sp)
	li $t1, VS_NCIMGH       ; h2 = VS_NCIMGH;
	sw $t1, 28($sp)
	jal DetectAABBCollision
	nop
	li $t0, 0x1 
	beq $v0, $t0, ResetFrogger ; if(DetectAABBCollisionResult) { goto ResetFrogger; }
	nop
	la $t5, BDObjContainer     ; bd_obj_container_addr = BDObjContainer;
	li $t6, 0x4                ; obj_count = 4;
DetectBulldozerCollision:
	lw $t7, 0($t5)          ; obj = *bd_obj_container_addr;
	nop
	lw $t1, 0($t7)          ; x2 = obj.x; 
	nop
	sw $t1, 16($sp)
	lw $t1, 4($t7)          ; y2 = obj.y; 
	nop
	sw $t1, 20($sp)
	li $t1, VS_BDIMGW       ; w2 = VS_BDIMGW;
	sw $t1, 24($sp)
	li $t1, VS_BDIMGH       ; h2 = VS_BDIMGH;
	sw $t1, 28($sp)
	jal DetectAABBCollision
	nop
	subi $t6, $t6, 0x1                  ; obj_count--;
	addi $t5, $t5, 0x4                  ; bd_obj_container_addr += 4;
	li $t0, 0x1 
	beq $v0, $t0, ResetFrogger          ; if(DetectAABBCollisionResult) { goto ResetFrogger; }
	nop
	bgtz $t6, DetectBulldozerCollision  ; if(!obj_count) { goto DetectBulldozerCollision; }
	nop
DetectLog1Collision:
	lw $a0, 16($s0)         ; x1 = x;
	lw $a1, 20($s0)         ; y1 = y;
	li $a2, VS_FRIMGW       ; w1 = VS_FRIMGW;
	li $a3, VS_FRIMGH       ; h1 = VS_FRIMGH;
	la $t0, LOObj1
	lw $t1, 0($t0)          ; x2 = VS_LO1_X 
	nop
	sw $t1, 16($sp)
	lw $t1, 4($t0)          ; y2 = VS_LO1_Y 
	nop
	sw $t1, 20($sp)
	li $t1, VS_LOIMGW       ; w2 = VS_LOIMGW;
	sw $t1, 24($sp)
	li $t1, VS_LOIMGH       ; h2 = VS_LOIMGH;
	sw $t1, 28($sp)
	jal DetectAABBCollision
	nop
	beqz $v0, DetectLog2Collision
	nop
	la $t2, LOObjState1
	lw $t1, 0($t2)         ; state = LOObj1->state;
	nop 
	beqz $t1, Log1AscendFrogger
	nop
	lw $a0, 20($s0)
	nop
	addi $a0, $a0, VS_VELOCITY  ; VS_LO1_Y += VS_VELOCITY;
	sw $a0, 20($s0)	
	b DetectLog2Collision 
	nop
Log1AscendFrogger:
	lw $a0, 20($s0)
	nop
	subi $a0, $a0, VS_VELOCITY  ; VS_LO1_Y -= VS_VELOCITY;
	sw $a0, 20($s0)
DetectLog2Collision:
	lw $a0, 16($s0)         ; x1 = x;
	lw $a1, 20($s0)         ; y1 = y;
	li $a2, VS_FRIMGW       ; w1 = VS_FRIMGW;
	li $a3, VS_FRIMGH       ; h1 = VS_FRIMGH;
	la $t0, LOObj2
	lw $t1, 0($t0)          ; x2 = VS_LO2_X 
	nop
	sw $t1, 16($sp)
	lw $t1, 4($t0)          ; y2 = VS_LO2_Y 
	nop
	sw $t1, 20($sp)
	li $t1, VS_LOIMGW       ; w2 = VS_LOIMGW;
	sw $t1, 24($sp)
	li $t1, VS_LOIMGH       ; h2 = VS_LOIMGH;
	sw $t1, 28($sp)
	jal DetectAABBCollision
	nop
	beqz $v0, DetectLog3Collision
	nop
	la $t2, LOObjState2
	lw $t1, 0($t2)         ; state = LOObj1->state;
	nop 
	beqz $t1, Log2AscendFrogger
	nop
	lw $a0, 20($s0)
	nop
	addi $a0, $a0, VS_VELOCITY  ; VS_LO1_Y += VS_VELOCITY;
	sw $a0, 20($s0)	
	b DetectLog3Collision 
	nop
Log2AscendFrogger:
	lw $a0, 20($s0)
	nop
	subi $a0, $a0, VS_VELOCITY  ; VS_LO1_Y -= VS_VELOCITY;
	sw $a0, 20($s0)
DetectLog3Collision:
	lw $a0, 16($s0)         ; x1 = x;
	lw $a1, 20($s0)         ; y1 = y;
	li $a2, VS_FRIMGW       ; w1 = VS_FRIMGW;
	li $a3, VS_FRIMGH       ; h1 = VS_FRIMGH;
	la $t0, LOObj3
	lw $t1, 0($t0)          ; x2 = VS_LO3_X 
	nop
	sw $t1, 16($sp)
	lw $t1, 4($t0)          ; y2 = VS_LO3_Y 
	nop
	sw $t1, 20($sp)
	li $t1, VS_LOIMGW       ; w2 = VS_LOIMGW;
	sw $t1, 24($sp)
	li $t1, VS_LOIMGH       ; h2 = VS_LOIMGH;
	sw $t1, 28($sp)
	jal DetectAABBCollision
	nop
	beqz $v0, WaitVSync
	nop
	la $t2, LOObjState3
	lw $t1, 0($t2)         ; state = LOObj1->state;
	nop 
	beqz $t1, Log3AscendFrogger
	nop
	lw $a0, 20($s0)
	nop
	addi $a0, $a0, VS_VELOCITY  ; VS_LO1_Y += VS_VELOCITY;
	sw $a0, 20($s0)	
	b WaitVSync 
	nop
Log3AscendFrogger:
	lw $a0, 20($s0)
	nop
	subi $a0, $a0, VS_VELOCITY  ; VS_LO1_Y -= VS_VELOCITY;
	sw $a0, 20($s0)
WaitVSync:              ; Wait For Vertical Retrace Period & Store XOR Pad Data
    lw $t0, 0($s0)      ; Load Pad Buffer
    nop               
    beqz $t0, WaitVSync ; if(pad_buffer == 0){ goto Wait; }
    nor $t0, $t0, $zero ; pad_buffer = !(pad_buffer | 0);
    sw $zero, 0($s0)    ; Store Zero To Pad Buffer
    sw $t0, 8($s0)      ; Store Pad Data
NCObj1Movement:
	la $t0, NCObj1
	lw $a0, 0($t0)
	nop
	addi $a0, $a0, VS_VELOCITY  ; VS_NC1_X += VS_VELOCITY;
	sw $a0, 0($t0)
	li $t0, VS_NC1_RIGHT_BOUNDS ; bounds = VS_NC1_RIGHT_BOUNDS;
	bgt $a0, $t0, BoundNC1      ; if(VS_NC1_X > VS_NC1_RIGHT_BOUNDS) { goto BoundNC1; }
	nop
NCObj2Movement:
	la $t0, NCObj2
	lw $a0, 0($t0)
	nop
	addi $a0, $a0, VS_VELOCITY  ; VS_NC1_X += VS_VELOCITY;
	sw $a0, 0($t0)
	li $t0, VS_NC1_RIGHT_BOUNDS ; bounds = VS_NC1_RIGHT_BOUNDS;
	bgt $a0, $t0, BoundNC2      ; if(VS_NC2_X > VS_NC1_RIGHT_BOUNDS) { goto BoundNC1; }
	nop
BDObj1Movement:
	la $t0, BDObj1
	lw $a0, 0($t0)
	nop
	addi $a0, $a0, VS_VELOCITY  ; VS_BD1_X += VS_VELOCITY;
	sw $a0, 0($t0)
	li $t0, VS_BD_RIGHT_BOUNDS  ; bounds = VS_BD_RIGHT_BOUNDS;
	bgt $a0, $t0, BoundBD1      ; if(VS_BD1_X > VS_BD_RIGHT_BOUNDS) { goto BoundBD1; }
	nop
BDObj2Movement:
	la $t0, BDObj2
	lw $a0, 0($t0)
	nop
	addi $a0, $a0, VS_VELOCITY  ; VS_BD2_X += VS_VELOCITY;
	sw $a0, 0($t0)
	li $t0, VS_BD_RIGHT_BOUNDS  ; bounds = VS_BD_RIGHT_BOUNDS;
	bgt $a0, $t0, BoundBD2      ; if(VS_BD2_X > VS_BD_RIGHT_BOUNDS) { goto BoundBD2; }
	nop
BDObj3Movement:
	la $t0, BDObj3
	lw $a0, 0($t0)
	nop
	addi $a0, $a0, VS_VELOCITY  ; VS_BD3_X += VS_VELOCITY;
	sw $a0, 0($t0)
	li $t0, VS_BD_RIGHT_BOUNDS  ; bounds = VS_BD_RIGHT_BOUNDS;
	bgt $a0, $t0, BoundBD3      ; if(VS_BD3_X > VS_BD_RIGHT_BOUNDS) { goto BoundBD3; }
	nop
BDObj4Movement:
	la $t0, BDObj4
	lw $a0, 0($t0)
	nop
	addi $a0, $a0, VS_VELOCITY  ; VS_BD4_X += VS_VELOCITY;
	sw $a0, 0($t0)
	li $t0, VS_BD_RIGHT_BOUNDS  ; bounds = VS_BD_RIGHT_BOUNDS;
	bgt $a0, $t0, BoundBD4      ; if(VS_BD4_X > VS_BD_RIGHT_BOUNDS) { goto BoundBD4; }
	nop
LOObj1State:
	la $t0, LOObj1                  ; obj = LOObj1;
	lw $a0, 4($t0)                  ; y = obj->y;
	li $t1, VS_LO_TOP_BOUNDS        ; bounds = VS_LO_TOP_BOUNDS;
	la $t2, LOObjState1             ; state = LOObjState1;
	ble $a0, $t1, SetDescendState1  ; if(y <= bounds) { goto SetDescendState1; }
	nop
	li $t1, VS_LO_BOTTOM_BOUNDS     ; bounds = VS_LO_BOTTOM_BOUNDS;
	bge $a0, $t1, SetAscendState1   ; if(y >= bounds) { goto SetAscendState1; }
	nop 
	b LOObj1Movement
	nop
SetDescendState1:
	li $t1, 0x1
	sw $t1, 0($t2)
	b LOObj1Movement
	nop
SetAscendState1:
	sw $zero, 0($t2)
LOObj1Movement:
	lw $t1, 0($t2)         ; state = LOObj1->state;
	nop 
	beqz $t1, LOObj1Ascend
	nop
	la $t0, LOObj1
	lw $a0, 4($t0)
	nop
	addi $a0, $a0, VS_VELOCITY  ; VS_LO1_Y += VS_VELOCITY;
	sw $a0, 4($t0)	
	b LOObj2State 
	nop
LOObj1Ascend:
	lw $a0, 4($t0)
	nop
	subi $a0, $a0, VS_VELOCITY  ; VS_LO1_Y -= VS_VELOCITY;
	sw $a0, 4($t0)
LOObj2State:
	la $t0, LOObj2                  ; obj = LOObj2;
	lw $a0, 4($t0)                  ; y = obj->y;
	li $t1, VS_LO_TOP_BOUNDS        ; bounds = VS_LO_TOP_BOUNDS;
	la $t2, LOObjState2             ; state = LOObjState2;
	ble $a0, $t1, SetDescendState2  ; if(y <= bounds) { goto SetDescendState2; }
	nop
	li $t1, VS_LO_BOTTOM_BOUNDS     ; bounds = VS_LO_BOTTOM_BOUNDS;
	bge $a0, $t1, SetAscendState2   ; if(y >= bounds) { goto SetAscendState2; }
	nop 
	b LOObj2Movement
	nop
SetDescendState2:
	li $t1, 0x1
	sw $t1, 0($t2)
	b LOObj2Movement
	nop
SetAscendState2:
	sw $zero, 0($t2)
LOObj2Movement:
	lw $t1, 0($t2)         ; state = LOObj1->state;
	nop 
	beqz $t1, LOObj2Ascend
	nop
	la $t0, LOObj2
	lw $a0, 4($t0)
	nop
	addi $a0, $a0, VS_VELOCITY  ; VS_LO2_Y += VS_VELOCITY;
	sw $a0, 4($t0)	
	b LOObj3State 
	nop
LOObj2Ascend:
	lw $a0, 4($t0)
	nop
	subi $a0, $a0, VS_VELOCITY  ; VS_LO2_Y -= VS_VELOCITY;
	sw $a0, 4($t0)
LOObj3State:
	la $t0, LOObj3                  ; obj = LOObj3;
	lw $a0, 4($t0)                  ; y = obj->y;
	li $t1, VS_LO_TOP_BOUNDS        ; bounds = VS_LO_TOP_BOUNDS;
	la $t2, LOObjState3             ; state = LOObjState3;
	ble $a0, $t1, SetDescendState3  ; if(y <= bounds) { goto SetDescendState3; }
	nop
	li $t1, VS_LO_BOTTOM_BOUNDS     ; bounds = VS_LO_BOTTOM_BOUNDS;
	bge $a0, $t1, SetAscendState3   ; if(y >= bounds) { goto SetAscendState3; }
	nop 
	b LOObj3Movement
	nop
SetDescendState3:
	li $t1, 0x1
	sw $t1, 0($t2)
	b LOObj3Movement
	nop
SetAscendState3:
	sw $zero, 0($t2)
LOObj3Movement:
	lw $t1, 0($t2)         ; state = LOObj3->state;
	nop 
	beqz $t1, LOObj3Ascend
	nop
	la $t0, LOObj3
	lw $a0, 4($t0)
	nop
	addi $a0, $a0, VS_VELOCITY  ; VS_LO3_Y += VS_VELOCITY;
	sw $a0, 4($t0)	
	b main 
	nop
LOObj3Ascend:
	lw $a0, 4($t0)
	nop
	subi $a0, $a0, VS_VELOCITY  ; VS_LO3_Y -= VS_VELOCITY;
	sw $a0, 4($t0)
main:
	b Input 
	nop
	addi $sp, $sp, 100
	
# Function: BoundPlayerLeft
# Purpose: Bounds frogger's X coordinate to not go beyond less than zero out of bounds of the screen 
BoundPlayerLeft:
	sw $zero, 16($s0)
	b FillScreen
	nop
	
# Function: BoundPlayerUp
# Purpose: Bounds frogger's Y coordinate to not go beyond less than zero out of bounds of the screen 
BoundPlayerUp:
	sw $zero, 20($s0)
	b FillScreen
	nop
	
# Function: BoundPlayerDown
# Purpose: Bounds frogger's Y coordinate to not go greater than VS_DOWN_BOUNDS out of bounds of the screen 
BoundPlayerDown:
	li $t0, VS_DOWN_BOUNDS 
	sw $t0, 20($s0) 
	b FillScreen
	nop
	
# Function: BoundPlayerLeft
# Purpose: Bounds frogger's X coordinate to not go beyond greater than VS_RIGHT_BOUNDS out of bounds of the screen 
BoundPlayerRight:
	li $t0, VS_RIGHT_BOUNDS 
	sw $t0, 16($s0) 
	b FillScreen
	nop
	
# Function: BoundNC1
# Purpose: If the X coordinate of Nascar1 goes a little further beyond the bounds of the right side of the screen,
# wrap it back around to the left side of the screen
BoundNC1:
	la $t0, NCObj1
	li $t1, -50 
	sw $t1, 0($t0)
	b NCObj2Movement 
	nop
	
# Function: BoundNC2
# Purpose: If the X coordinate of Nascar2's goes a little further beyond the bounds of the right side of the screen,
# wrap it back around to the left side of the screen
BoundNC2:
	la $t0, NCObj2
	li $t1, -50 
	sw $t1, 0($t0)
	b BDObj1Movement 
	nop	
	
# Function: BoundBD1
# Purpose: If the X coordinate of Bulldozer1 goes a little further beyond the bounds of the right side of the screen,
# wrap it back around to the left side of the screen
BoundBD1:
	la $t0, BDObj1
	li $t1, -50 
	sw $t1, 0($t0)
	b BDObj2Movement 
	nop
	
# Function: BoundBD2
# Purpose: If the X coordinate of Bulldozer2 goes a little further beyond the bounds of the right side of the screen,
# wrap it back around to the left side of the screen
BoundBD2:
	la $t0, BDObj2
	li $t1, -50 
	sw $t1, 0($t0)
	b BDObj3Movement 
	nop
	
# Function: BoundBD3
# Purpose: If the X coordinate of Bulldozer3 goes a little further beyond the bounds of the right side of the screen,
# wrap it back around to the left side of the screen
BoundBD3:
	la $t0, BDObj3
	li $t1, -50 
	sw $t1, 0($t0)
	b BDObj4Movement 
	nop
	
# Function: BoundBD4
# Purpose: If the X coordinate of Bulldozer4 goes a little further beyond the bounds of the right side of the screen,
# wrap it back around to the left side of the screen
BoundBD4:
	la $t0, BDObj4
	li $t1, -50 
	sw $t1, 0($t0)
	b LOObj1State 
	nop
	
# Function: DetectAABBCollision
# Purpose: Detects whether or two rectangles are colliding with one another 
# a0: x1, a1: y1, a2: w1, a3: h1, 16($sp): x2, 20($sp): y2, 24($sp): w2, 28($sp): h2 
DetectAABBCollision:
	lw $t1, 16($sp)
	add $t0, $a0, $a2       ; size1 = x1 + w1;
	ble $t0, $t1, AABBFalse ; if(size1 < x2) { collide = false; goto AABBFalse; }
	lw $t2, 24($sp) 
	nop
	add $t0, $t1, $t2       ; size2 = x2 + w2;
	bge $a0, $t0, AABBFalse ; if(x1 >= size2) { collide = false; goto AABBFalse; }
	lw $t2, 20($sp)
	add $t1, $a1, $a3       ; size1 = y1 + h1;
	ble $t1, $t2, AABBFalse ; if(size1 < y2) { collide = false; goto AABBFalse; }
	lw $t4, 28($sp)
	nop
	add $t3, $t2, $t4       ; size2 = y2 + h2;
	bge $a1, $t3, AABBFalse ; if(y1 < size2) { collide = false; goto AABBFalse; }
	li $v0, 0x1 
	jr $ra 
	nop
AABBFalse:
	li $v0, 0x0 
	jr $ra 
	nop
	
# Function: ResetFrogger
# Purpose: 
ResetFrogger:
	li $t0, VS_PLAYERX
	li $t1, VS_PLAYERY
	sw $t0, 16($s0)
	sw $t1, 20($s0)
	b WaitVSync
	nop
	
# Function: DrawSync
# Purpose: Halts program execution until all drawing commands have been executed by the gpu 
DrawSync:
	li $t0, VS_IO             ; vs_io_addr = (unsigned long*)0x1F800000;
DrawSyncLoop:
	lw $t1, VS_GP1($t0)       ; gpu1 = *vs_gpu1;
	li $t2, VS_CMD_STAT_READY ; gpu1_cmd = VS_CMD_STAT_READY; (delay slot)
	and $t1, $t1, $t2         ; gpu1 &= gpu1_cmd;
	beqz $t1, DrawSyncLoop    ; if(gpu1 == 0) { goto DrawSyncLoop; }
	nop 
	jr $ra
	nop
	
# Function: DMASync
# Purpose: Halts program execution until all gpu dma transfers have completed
DMASync:
	li $t0, VS_IO             ; vs_io_addr = (unsigned long*)0x1F800000;
DMASyncLoop:
	lw $t1, VS_GPU_CHCR($t0)  ; gpu0 = *vs_gpu0;
	li $t2, VS_DMA_ENABLE     ; gpu0_cmd = VS_CMD_STAT_READY; (delay slot)
	and $t1, $t1, $t2         ; gpu0 &= gpu0_cmd;
	bnez $t1, DMASyncLoop     ; if(gpu0 == 0) { goto DrawSyncLoop; }
	nop 
	jr $ra
	nop
	
# Function: VS_GetTexturePage
# Purpose: Gets the texture page of the texture given the texture parameters
# a0: mode, a1: a, a2: x, a3: y 
	.text 
	.globl
	.type, @function
VS_GetTexturePage:
	andi $a0, $a0, 0x3    # mode &= 3; 
	sll  $a0, $a0, 0x7    # mode <<= 7;
	andi $a1, $a1, 0x3    # a &= 3; 
	sll  $a1, $a1, 0x5    # a <<= 5;
	or   $a0, $a0, $a1    # mode |= a;
	andi $t1, $a3, 0x100  # y &= 0x100;
	sra  $t1, $t1, 0x4    # y >>= 4;
	or   $a0, $a0, $t1    # mode |= y;
	andi $a2, $a2, 0x3ff  # x &= 0x3ff;
	sra  $a2, $a2, 0x6    # x >>= 6;
	or   $a0, $a0, $a2    # mode |= x;
	andi $a3, $a3, 0x200  # y &= 0x200;
	sll  $a3, $a3, 0x2    # y <<= 2;
	or   $v0, $a0, $a3    # mode |= y;
	jr   $ra 
	nop

# Function: VS_GetCLUT
# Purpose: Gets the color palette coordinates in a format that can be given to the GPU 
# a0: x, a1: y 
	.text 
	.globl VS_GetCLUT
	.type, @function
VS_GetCLUT:
	sll  $a1, $a1, 0x6  # y <<= 6;
	sra  $a0, $a0, 0x4  # x >>= 4;
	andi $a0, $a0, 0x3f # x &= 0x3f;
	or   $v0, $a0, $a1  # y |= x;
	jr $ra 
	nop
	
# Function: VS_TransferImageDataToVram
# Purpose: Manually writes image data to the GPU's video memory
# a0: x, a1: y, a2: width, a3: height, 16($sp): data 
VS_TransferImageDataToVram:
	li $t0, VS_IO           ; vs_io_addr = (unsigned long*)0x1F800000;
	li $t1, VS_CPU_TO_VRAM  ; vs_cmd_cpu_to_vram = 0xA0000000;
	sw $t1, VS_GP0($t0)     ; *vs_gp0 = vs_cmd_cpu_to_vram;
	sll $a1, $a1, 0x10      ; y <<= 16;
	addu $a1, $a1, $a0      ; y += x;
	sw $a1, VS_GP0($t0)     ; *vs_gp0 = y;
	sll $t1, $a3, 0x10      ; h <<= 16;
	addu $t1, $t1, $a2      ; h += w;
	sw $t1, VS_GP0($t0)     ; *vs_gp0 = h;
	mult $a2, $a3           ; size = w * h;
	mflo $t1 
	sll $t1, $t1, 0x1       ; size <<= 1;
	lw  $a0, 16($sp)        
	sra $t1, $t1, 0x2       ; size /= 4;
	subi $sp, $sp, 8         
	sw $ra, 4($sp)
TransferDataLoop:
	lw $t2,0($a0)           ; word = (unsigned long*)data;
	addiu $a0, $a0, 0x4     ; data += 4;
	sw $t2, VS_GP0($t0)     ; *vs_gpu0 = word;
	bnez $t1, TransferDataLoop ; if(size != 0) { goto TransferDataLoop; }
	subi $t1, $t1, 0x1         ; size--; (delay slot)
	jal DMASync                ; DMASync();
	nop
	lw $ra, 4($sp)
	addi $sp, $sp, 8
	jr $ra 
	nop
	
# Function: VS_TexturePurpleBlock
# Purpose: Textures a purple grass block to the X,Y screen coordinates with alpha transparency turned on 
# a0: x, a1: y, a2: texpage
VS_TexturePurpleBlock:
	subi $sp, $sp, 80 
	sw $ra, 4($sp)
	move $t2, $a2
	li $t0, VS_IO
	li   $t1, 0xE6000000   ; cmd = gpu0_cmd_mask_bits;
	addi $t1, $t1, 0x1     ; cmd += 1;
	sw $t1, VS_GP0($t0)    ; *vs_gp0 = cmd;
	li $a2, 0x0            ; palette = 0;
	li $a3, 0x0            ; u1 = 0;
	sw $zero, 16($sp)      ; v1 = 0;
	sw $a0, 20($sp)        ; x2 = VS_PBIMGX;
	li $t1, VS_PBIMGH
	add $t1, $t1, $a1 
	sw $t1, 24($sp)        ; y2 = VS_BIMGY + VS_PBIMGH;
	sw $t2, 28($sp)        ; texpage = GetTexturePage(2,1,VS_PBIMGX,VS_PBIMGY); 
	sw $zero, 32($sp)      ; u2 = 0;
	li $t1, VS_PBIMGH 
	sw $t1, 36($sp)        ; v2 = VS_PBIMGH;
	li $t1, VS_PBIMGW 
	addu $t1, $t1, $a0
	sw $t1, 40($sp)        ; x3 = VS_PBIMGX + VS_PBIMGW;
	sw $a1, 44($sp)        ; y3 = VS_BIMGY;
	li $t1, VS_PBIMGW 
	sw $t1, 48($sp)        ; u3 = VS_PBIMGW;
	sw $zero, 52($sp)      ; v3 = 0;
	li $t1, VS_PBIMGW 
	add $t1, $t1, $a0
	sw $t1, 56($sp)        ; x4 = VS_PBIMGX + VS_PBIMGW;
	li $t1, VS_PBIMGH 
	add $t1, $t1, $a1 
	sw $t1, 60($sp)        ; y4 = VS_BIMGY + VS_PBIMGH;
	li $t1, VS_PBIMGW 
	sw $t1, 64($sp)        ; u4 = VS_PBIMGW;
	li $t1, VS_PBIMGH 
	sw $t1, 68($sp)        ; v4 = VS_PBIMGH;
	jal VS_TextureFourPointPoly
	nop
	jal DrawSync
	nop
	lw $ra, 4($sp)
	addi $sp, $sp, 80
	jr $ra 
	nop
	
# Function: VS_TextureFrogger
# Purpose: Textures frogger to the X,Y screen coordinates with alpha transparency turned on 
# a0: x, a1: y, a2: texpage
VS_TextureFrogger:
	subi $sp, $sp, 80 
	sw $ra, 4($sp)
	move $t2, $a2
	li $t0, VS_IO
	li   $t1, 0xE6000000   ; cmd = gpu0_cmd_mask_bits;
	addi $t1, $t1, 0x1     ; cmd += 1;
	sw $t1, VS_GP0($t0)    ; *vs_gp0 = cmd;
	li $a2, 0x0            ; palette = 0;
	li $a3, 0x0            ; u1 = 0;
	sw $zero, 16($sp)      ; v1 = 0;
	sw $a0, 20($sp)        ; x2 = VS_FRIMGX;
	li $t1, VS_FRIMGH
	add $t1, $t1, $a1 
	sw $t1, 24($sp)        ; y2 = VS_BIMGY + VS_FRIMGH;
	sw $t2, 28($sp)        ; texpage = GetTexturePage(2,1,VS_FRIMGX,VS_FRIMGY); 
	sw $zero, 32($sp)      ; u2 = 0;
	li $t1, VS_FRIMGH 
	sw $t1, 36($sp)        ; v2 = VS_FRIMGH;
	li $t1, VS_FRIMGW 
	addu $t1, $t1, $a0
	sw $t1, 40($sp)        ; x3 = VS_FRIMGX + VS_FRIMGW;
	sw $a1, 44($sp)        ; y3 = VS_FRIMGY;
	li $t1, VS_FRIMGW 
	sw $t1, 48($sp)        ; u3 = VS_FRIMGW;
	sw $zero, 52($sp)      ; v3 = 0;
	li $t1, VS_FRIMGW 
	add $t1, $t1, $a0
	sw $t1, 56($sp)        ; x4 = VS_FRIMGX + VS_FRIMGW;
	li $t1, VS_FRIMGH 
	add $t1, $t1, $a1 
	sw $t1, 60($sp)        ; y4 = VS_FRIMGY + VS_FRIMGH;
	li $t1, VS_FRIMGW 
	sw $t1, 64($sp)        ; u4 = VS_FRIMGW;
	li $t1, VS_FRIMGH 
	sw $t1, 68($sp)        ; v4 = VS_FRIMGH;
	jal VS_TextureFourPointPoly
	nop
	jal DrawSync
	nop
	lw $ra, 4($sp)
	addi $sp, $sp, 80
	jr $ra 
	nop 
	
# Function: VS_TextureNascar1
# Purpose: Textures a Nascar1 sprite to the X,Y screen coordinates with alpha transparency turned on 
# a0: x, a1: y, a2: texpage
VS_TextureNascar1:
	subi $sp, $sp, 80 
	sw $ra, 4($sp)
	move $t2, $a2
	li $t0, VS_IO
	li   $t1, 0xE6000000   ; cmd = gpu0_cmd_mask_bits;
	addi $t1, $t1, 0x1     ; cmd += 1;
	sw $t1, VS_GP0($t0)    ; *vs_gp0 = cmd;
	li $a2, 0x0            ; palette = 0;
	li $a3, 0x0            ; u1 = 0;
	sw $zero, 16($sp)      ; v1 = 0;
	sw $a0, 20($sp)        ; x2 = VS_NCIMGX;
	li $t1, VS_NCIMGH
	add $t1, $t1, $a1 
	sw $t1, 24($sp)        ; y2 = VS_BIMGY + VS_NCIMGH;
	sw $t2, 28($sp)        ; texpage = GetTexturePage(2,1,VS_NCIMGX,VS_NCIMGY); 
	sw $zero, 32($sp)      ; u2 = 0;
	li $t1, VS_NCIMGH 
	sw $t1, 36($sp)        ; v2 = VS_NCIMGH;
	li $t1, VS_NCIMGW 
	addu $t1, $t1, $a0
	sw $t1, 40($sp)        ; x3 = VS_NCIMGX + VS_NCMGW;
	sw $a1, 44($sp)        ; y3 = VS_NCIMGY;
	li $t1, VS_NCIMGW 
	sw $t1, 48($sp)        ; u3 = VS_NCIMGW;
	sw $zero, 52($sp)      ; v3 = 0;
	li $t1, VS_NCIMGW 
	add $t1, $t1, $a0
	sw $t1, 56($sp)        ; x4 = VS_NCIMGX + VS_NCIMGW;
	li $t1, VS_NCIMGH 
	add $t1, $t1, $a1 
	sw $t1, 60($sp)        ; y4 = VS_NCIMGY + VS_NCIMGH;
	li $t1, VS_NCIMGW 
	sw $t1, 64($sp)        ; u4 = VS_NCIMGW;
	li $t1, VS_NCIMGH 
	sw $t1, 68($sp)        ; v4 = VS_NCIMGH;
	jal VS_TextureFourPointPoly
	nop
	jal DrawSync
	nop
	lw $ra, 4($sp)
	addi $sp, $sp, 80
	jr $ra 
	nop 
	
# Function: VS_TextureBulldozer
# Purpose: Textures a bulldozer sprite to the X,Y screen coordinates with alpha transparency turned on 
# a0: x, a1: y, a2: texpage
VS_TextureBulldozer:
	subi $sp, $sp, 80 
	sw $ra, 4($sp)
	move $t2, $a2
	li $t0, VS_IO
	li   $t1, 0xE6000000   ; cmd = gpu0_cmd_mask_bits;
	addi $t1, $t1, 0x1     ; cmd += 1;
	sw $t1, VS_GP0($t0)    ; *vs_gp0 = cmd;
	li $a2, 0x0            ; palette = 0;
	li $a3, 0x0            ; u1 = 0;
	sw $zero, 16($sp)      ; v1 = 0;
	sw $a0, 20($sp)        ; x2 = VS_BDIMGX;
	li $t1, VS_BDIMGH
	add $t1, $t1, $a1 
	sw $t1, 24($sp)        ; y2 = VS_BDIMGY + VS_BDIMGH;
	sw $t2, 28($sp)        ; texpage = GetTexturePage(2,1,VS_BDIMGX,VS_BDIMGY); 
	sw $zero, 32($sp)      ; u2 = 0;
	li $t1, VS_BDIMGH 
	sw $t1, 36($sp)        ; v2 = VS_BDIMGH;
	li $t1, VS_BDIMGW 
	addu $t1, $t1, $a0
	sw $t1, 40($sp)        ; x3 = VS_BDIMGX + VS_BDMGW;
	sw $a1, 44($sp)        ; y3 = VS_NCIMGY;
	li $t1, VS_BDIMGW 
	sw $t1, 48($sp)        ; u3 = VS_BDIMGW;
	sw $zero, 52($sp)      ; v3 = 0;
	li $t1, VS_BDIMGW 
	add $t1, $t1, $a0
	sw $t1, 56($sp)        ; x4 = VS_BDIMGX + VS_BDIMGW;
	li $t1, VS_BDIMGH 
	add $t1, $t1, $a1 
	sw $t1, 60($sp)        ; y4 = VS_BDIMGY + VS_BDIMGH;
	li $t1, VS_BDIMGW 
	sw $t1, 64($sp)        ; u4 = VS_BDIMGW;
	li $t1, VS_BDIMGH 
	sw $t1, 68($sp)        ; v4 = VS_BDIMGH;
	jal VS_TextureFourPointPoly
	nop
	jal DrawSync
	nop
	lw $ra, 4($sp)
	addi $sp, $sp, 80
	jr $ra 
	nop 
	
# Function: VS_TextureLog
# Purpose: Textures a log sprite to the X,Y screen coordinates with alpha transparency turned on 
# a0: x, a1: y, a2: texpage
VS_TextureLog:
	subi $sp, $sp, 80 
	sw $ra, 4($sp)
	move $t2, $a2
	li $t0, VS_IO
	li   $t1, 0xE6000000   ; cmd = gpu0_cmd_mask_bits;
	addi $t1, $t1, 0x1     ; cmd += 1;
	sw $t1, VS_GP0($t0)    ; *vs_gp0 = cmd;
	li $a2, 0x0            ; palette = 0;
	li $a3, 0x0            ; u1 = 0;
	sw $zero, 16($sp)      ; v1 = 0;
	sw $a0, 20($sp)        ; x2 = VS_LOIMGX;
	li $t1, VS_LOIMGH
	add $t1, $t1, $a1 
	sw $t1, 24($sp)        ; y2 = VS_LOIMGY + VS_LOIMGH;
	sw $t2, 28($sp)        ; texpage = GetTexturePage(2,1,VS_LOIMGX,VS_LOIMGY); 
	sw $zero, 32($sp)      ; u2 = 0;
	li $t1, VS_LOIMGH 
	sw $t1, 36($sp)        ; v2 = VS_LOIMGH;
	li $t1, VS_LOIMGW 
	addu $t1, $t1, $a0
	sw $t1, 40($sp)        ; x3 = VS_LOIMGX + VS_LOMGW;
	sw $a1, 44($sp)        ; y3 = VS_LOIMGY;
	li $t1, VS_LOIMGW 
	sw $t1, 48($sp)        ; u3 = VS_LOIMGW;
	sw $zero, 52($sp)      ; v3 = 0;
	li $t1, VS_LOIMGW 
	add $t1, $t1, $a0
	sw $t1, 56($sp)        ; x4 = VS_LOIMGX + VS_LOIMGW;
	li $t1, VS_LOIMGH 
	add $t1, $t1, $a1 
	sw $t1, 60($sp)        ; y4 = VS_LOIMGY + VS_LOIMGH;
	li $t1, VS_LOIMGW 
	sw $t1, 64($sp)        ; u4 = VS_LOIMGW;
	li $t1, VS_LOIMGH 
	sw $t1, 68($sp)        ; v4 = VS_LOIMGH;
	jal VS_TextureFourPointPoly
	nop
	jal DrawSync
	nop
	lw $ra, 4($sp)
	addi $sp, $sp, 80
	jr $ra 
	nop 
	
# Function: VS_TextureVFlipFrogger
# Purpose: Textures a vertically flipped frogger to the X,Y screen coordinates with alpha transparency turned on 
# a0: x, a1: y, a2: texpage
VS_TextureVFlipFrogger:
	subi $sp, $sp, 80 
	sw $ra, 4($sp)
	move $t2, $a2
	li $t0, VS_IO
	li   $t1, 0xE6000000   ; cmd = gpu0_cmd_mask_bits;
	addi $t1, $t1, 0x1     ; cmd += 1;
	sw $t1, VS_GP0($t0)    ; *vs_gp0 = cmd;
	li $a2, 0x0            ; palette = 0;
	li $a3, VS_FRIMGW            ; u1 = 0;
	li $t1, VS_FRIMGH 
	sw $t1, 16($sp)      ; v1 = 0;
	sw $a0, 20($sp)        ; x2 = VS_FRIMGX;
	li $t1, VS_FRIMGH
	add $t1, $t1, $a1 
	sw $t1, 24($sp)        ; y2 = VS_BIMGY + VS_FRIMGH;
	sw $t2, 28($sp)        ; texpage = GetTexturePage(2,1,VS_FRIMGX,VS_FRIMGY); 
	li $t1, VS_FRIMGW 
	addu $t1, $t1, $a0
	sw $t1, 40($sp)        ; x3 = VS_FRIMGX + VS_FRIMGW;
	sw $a1, 44($sp)        ; y3 = VS_FRIMGY;
	li $t1, VS_FRIMGW 
	sw $t1, 32($sp)        ; u3 = VS_FRIMGW;
	sw $zero, 36($sp)      ; v3 = 0;
	li $t1, VS_FRIMGW 
	sw $zero, 48($sp)      ; u2 = 0;
	li $t1, VS_FRIMGH 
	sw $t1, 52($sp)        ; v2 = VS_FRIMGH;
	add $t1, $t1, $a0
	sw $t1, 56($sp)        ; x4 = VS_FRIMGX + VS_FRIMGW;
	li $t1, VS_FRIMGH 
	add $t1, $t1, $a1 
	sw $t1, 60($sp)        ; y4 = VS_FRIMGY + VS_FRIMGH;
	li $t1, VS_FRIMGW 
	sw $zero, 64($sp)        ; u4 = VS_FRIMGW;
	li $t1, VS_FRIMGH 
	sw $zero, 68($sp)        ; v4 = VS_FRIMGH;
	jal VS_TextureFourPointPoly
	nop
	jal DrawSync
	nop
	lw $ra, 4($sp)
	addi $sp, $sp, 80
	jr $ra 
	nop
	
# Function: VS_TextureLeftFrogger
# Purpose: Textures the left animation of frogger to the X,Y screen coordinates with alpha transparency turned on 
# a0: x, a1: y, a2: texpage
VS_TextureLeftFrogger:
	subi $sp, $sp, 80 
	sw $ra, 4($sp)
	move $t2, $a2
	li $t0, VS_IO
	li   $t1, 0xE6000000   ; cmd = gpu0_cmd_mask_bits;
	addi $t1, $t1, 0x1     ; cmd += 1;
	sw $t1, VS_GP0($t0)    ; *vs_gp0 = cmd;
	li $a2, 0x0            ; palette = 0;
	li $a3, 0x0            ; u1 = 0;
	addi $t1, $a3, 64
	sw $t1, 16($sp)        ; v1 = 64;
	sw $a0, 20($sp)        ; x2 = VS_FRIMGX;
	li $t1, VS_FRIMGH
	add $t1, $t1, $a1 
	sw $t1, 24($sp)        ; y2 = VS_BIMGY + VS_FRIMGH;
	sw $t2, 28($sp)        ; texpage = GetTexturePage(2,1,VS_FRIMGX,VS_FRIMGY); 
	sw $zero, 32($sp)      ; u2 = 0;
	li $t1, VS_FRIMGH 
	addi $t1, $t1, 64
	sw $t1, 36($sp)        ; v2 = VS_FRIMGH + 64;
	li $t1, VS_FRIMGW 
	addu $t1, $t1, $a0
	sw $t1, 40($sp)        ; x3 = VS_FRIMGX + VS_FRIMGW;
	sw $a1, 44($sp)        ; y3 = VS_FRIMGY;
	li $t1, VS_FRIMGW 
	sw $t1, 48($sp)        ; u3 = VS_FRIMGW;
	li $t1, 64
	sw $t1, 52($sp)        ; v3 = 64;
	li $t1, VS_FRIMGW 
	add $t1, $t1, $a0
	sw $t1, 56($sp)        ; x4 = VS_FRIMGX + VS_FRIMGW;
	li $t1, VS_FRIMGH 
	add $t1, $t1, $a1 
	sw $t1, 60($sp)        ; y4 = VS_FRIMGY + VS_FRIMGH;
	li $t1, VS_FRIMGW 
	sw $t1, 64($sp)        ; u4 = VS_FRIMGW;
	li $t1, VS_FRIMGH 
	addi $t1, $t1, 64
	sw $t1, 68($sp)        ; v4 = VS_FRIMGH + 64;
	jal VS_TextureFourPointPoly
	nop
	jal DrawSync
	nop
	lw $ra, 4($sp)
	addi $sp, $sp, 80
	jr $ra 
	nop 
	
# Function: VS_TextureRightFrogger
# Purpose: Textures the right animation of frogger to the X,Y screen coordinates with alpha transparency turned on 
# a0: x, a1: y, a2: texpage
VS_TextureRightFrogger:
	subi $sp, $sp, 80 
	sw $ra, 4($sp)
	move $t2, $a2
	li $t0, VS_IO
	li   $t1, 0xE6000000   ; cmd = gpu0_cmd_mask_bits;
	addi $t1, $t1, 0x1     ; cmd += 1;
	sw $t1, VS_GP0($t0)    ; *vs_gp0 = cmd;
	li $a2, 0x0            ; palette = 0;
	li $a3, VS_FRIMGW      ; u1 = VS_FRIMGW;
	addi $t1, $zero, 64
	addi $t1, $t1, VS_FRIMGH
	sw $t1, 16($sp)        ; v1 = 64 + VS_FRIMGH;
	sw $a0, 20($sp)        ; x2 = VS_FRIMGX;
	li $t1, VS_FRIMGH
	add $t1, $t1, $a1 
	sw $t1, 24($sp)        ; y2 = VS_BIMGY + VS_FRIMGH;
	sw $t2, 28($sp)        ; texpage = GetTexturePage(2,1,VS_FRIMGX,VS_FRIMGY); 
	sw $zero, 48($sp)      ; u2 = 0;
	li $t1, VS_FRIMGH 
	addi $t1, $t1, 64
	sw $t1, 52($sp)        ; v2 = VS_FRIMGH + 64;
	li $t1, VS_FRIMGW 
	addu $t1, $t1, $a0
	sw $t1, 40($sp)        ; x3 = VS_FRIMGX + VS_FRIMGW;
	sw $a1, 44($sp)        ; y3 = VS_FRIMGY;
	li $t1, VS_FRIMGW 
	sw $t1, 32($sp)        ; u3 = VS_FRIMGW;
	li $t1, 64
	sw $t1, 36($sp)        ; v3 = 64;
	li $t1, VS_FRIMGW 
	add $t1, $t1, $a0
	sw $t1, 56($sp)        ; x4 = VS_FRIMGX + VS_FRIMGW;
	li $t1, VS_FRIMGH 
	add $t1, $t1, $a1 
	sw $t1, 60($sp)        ; y4 = VS_FRIMGY + VS_FRIMGH;
	li $t1, VS_FRIMGW 
	sw $zero, 64($sp)        ; u4 = 0;
	li $t1, VS_FRIMGH 
	addi $t1, $zero, 64
	sw $t1, 68($sp)        ; v4 = 64;
	jal VS_TextureFourPointPoly
	nop
	jal DrawSync
	nop
	lw $ra, 4($sp)
	addi $sp, $sp, 80
	jr $ra 
	nop 
	
# Function: VS_TextureFourPointPoly
# Purpose: Draws a textured four-point polygon, a quad, to the display area using the GPU 
# a0: x1, a1: y1, a2: palette, a3: u1, 16($sp): v1, 20($sp): x2, 24($sp): y2, 28($sp): texpage, 32($sp): u2, 36($sp): v2, 40($sp): x3, 44($sp): y3, 48($sp): u3, 52($sp): v3
# 56($sp): x4, 60($sp): y4, 64($sp): u4, 68($sp): v4
VS_TextureFourPointPoly:         
	li   $t0, VS_IO                           ; vs_io_addr = (unsigned long*)0x1F800000;
	li   $t1, VS_TEXTURE_FOUR_POINT_POLY      ; gpu0_cmd = VS_TEXTURE_FOUR_POINT_POLY;
	sw   $t1, VS_GP0($t0)                     ; *vs_gpu0 = gpu0_cmd;
	andi $a0, $a0, 0xFFFF                     ; x1 &= 0xFFFF;
	sll  $a1, $a1, 0x10                       ; y1 <<= 16;
	or   $a1, $a1, $a0                        ; y1 |= x1;
	sw   $a1, VS_GP0($t0)                     ; *vs_gpu0 = y1;
	sll  $a2, $a2, 0x10                       ; palette <<= 16;
	lhu  $a1, 16($sp)
	andi $a3, $a3, 0xFF                       ; u1 &= 0xFF; 
	andi $a1, $a1, 0xFF                       ; v1 &= 0xFF;
	sll  $a1, $a1, 0x8                        ; v1 <<= 8;
	or   $a1, $a1, $a3                        ; v1 |= u1;
	or   $a1, $a1, $a2                        ; v1 |= palette;
	sw   $a1, VS_GP0($t0)                     ; *vs_gpu0 = v1;
	lhu  $a0, 20($sp)
	lhu  $a1, 24($sp)
	andi $a0, $a0, 0xFFFF                     ; x2 &= 0xFFFF;
	sll  $a1, $a1, 0x10                       ; y2 <<= 16;
	or   $a1, $a1, $a0                        ; y2 |= x2;
	sw   $a1, VS_GP0($t0)                     ; *vs_gpu0 = y2;
	lhu  $a1, 36($sp)
	lhu  $a2, 28($sp)
	lhu  $a3, 32($sp)
	sll  $a2, $a2, 0x10                       ; texpage <<= 16;
	andi $a3, $a3, 0xFF                       ; u2 &= 0xFF; 
	andi $a1, $a1, 0xFF                       ; v2 &= 0xFF;
	sll  $a1, $a1, 0x8                        ; v2 <<= 8;
	or   $a1, $a1, $a3                        ; v2 |= u2;
	or   $a1, $a1, $a2                        ; v2 |= texpage;
	sw   $a1, VS_GP0($t0)                     ; *vs_gpu0 = v2;
	lhu  $a0, 40($sp)
	lhu  $a1, 44($sp)
	andi $a0, $a0, 0xFFFF                     ; x3 &= 0xFFFF;
	sll  $a1, $a1, 0x10                       ; y3 <<= 16;
	or   $a1, $a1, $a0                        ; y3 |= x3;
	sw   $a1, VS_GP0($t0)                     ; *vs_gpu0 = y3;
	lhu  $a3, 48($sp)
	lhu  $a1, 52($sp)
	andi $a3, $a3, 0xFF                       ; u3 &= 0xFF; 
	andi $a1, $a1, 0xFF                       ; v3 &= 0xFF;
	sll  $a1, $a1, 0x8                        ; v3 <<= 8;
	or   $a1, $a1, $a3                        ; v3 |= u3;
	sw   $a1, VS_GP0($t0)                     ; *vs_gpu0 = v3;
	lhu  $a0, 56($sp)
	lhu  $a1, 60($sp)
	andi $a0, $a0, 0xFFFF                    ; x4 &= 0xFFFF;
	sll  $a1, $a1, 0x10                      ; y4 <<= 16;
	or   $a1, $a1, $a0                       ; y4 |= x4;
	sw   $a1, VS_GP0($t0)                    ; *vs_gpu0 = y4;
	lhu  $a2, 64($sp)
	lhu  $a3, 68($sp)
	andi $a2, $a2, 0xFF                      ; u4 &= 0xFF;
	sll  $a3, $a3, 0x8                       ; v4 <<= 8;
	or   $a3, $a3, $a2                       ; v4 |= u4;
	sw   $a3, VS_GP0($t0)                    ; *vs_gpu0 = v4;
	jr $ra
	nop
	
.data 
.align, 4 
PurpleBlock:
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7812, 0x0, 0x0, 0x7812, 0x7812 
	.half 0x0, 0x0, 0x7812, 0x0, 0x0, 0x7812, 0x7812, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x0, 0x7812, 0x7812, 0x7812 
	.half 0x7812, 0x7812, 0x7812, 0x0, 0x0, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x0, 0x0, 0x7812, 0x7800 
	.half 0x1f, 0x7800, 0x7812, 0x7812, 0x7800, 0x1f, 0x7800, 0x7812, 0x7812, 0x7812, 0x7800, 0x1f, 0x7800, 0x7812, 0x0, 0x0, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x7800, 0x7812 
	.half 0x7812, 0x7812, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x0, 0x0, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x1f, 0x7812, 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812 
	.half 0x0, 0x0, 0x7812, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x1f, 0x7800, 0x1f, 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x0, 0x0, 0x7812, 0x7812, 0x7800, 0x1f, 0x7800
	.half 0x7812, 0x7812, 0x7800, 0x1f, 0x7812, 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x0, 0x0, 0x7812, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x7800, 0x1f, 0x7800, 0x7812, 0x7812, 0x7812 
	.half 0x7812, 0x7812, 0x7812, 0x7812, 0x0, 0x0, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x7812, 0x0, 0x0, 0x7812 
	.half 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x1f, 0x7812, 0x7812, 0x7800, 0x1f, 0x7800, 0x7812, 0x7812, 0x0, 0x0, 0x7800, 0x1f, 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812 
	.half 0x0, 0x7812, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x7812, 0x0, 0x0, 0x7812, 0x7800, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x7800, 0x1f, 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812 
	.half 0x7812, 0x0, 0x0, 0x7812, 0x7812, 0x7812, 0x7800, 0x1f, 0x7800, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x0, 0x0, 0x7812, 0x7812, 0x7812, 0x7812 
	.half 0x7800, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x7812, 0x0, 0x0, 0x7812, 0x7812, 0x7800, 0x7812, 0x7812, 0x0, 0x0, 0x7812, 0x0, 0x0, 0x7812 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	
.data 
.align, 4 
FrogUpAnim:
.empty, 12

.data 
.align, 4 
FrogLeftAnim:
.empty, 12

.data 
.align, 4 
FrogUpCounter:
.word  0

.data 
.align, 4 
FrogLeftCounter:
.word  0

.data 
.align, 4 
FrogState:
.word  0

.data 
.align, 4 
NCObj1:
.empty, 8

.data 
.align, 4 
NCObj2:
.empty, 8

.data 
.align, 4 
BDObj1:
.empty, 8

.data 
.align, 4 
BDObj2:
.empty, 8

.data 
.align, 4 
BDObj3:
.empty, 8

.data 
.align, 4 
BDObj4:
.empty, 8

.data 
.align, 4 
BDObjContainer:
.empty, 16

.data 
.align, 4 
LOObj1:
.empty, 8

.data 
.align, 4 
LOObj2:
.empty, 8

.data 
.align, 4 
LOObj3:
.empty, 8

.data 
.align, 4 
LOObjState1:
.empty, 4

.data 
.align, 4 
LOObjState2:
.empty, 4

.data 
.align, 4 
LOObjState3:
.empty, 4
	
.data 
.align, 4 
FrogUp1:
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x3ff, 0x364, 0x3ff, 0x3ff, 0x0, 0x0, 0x364, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x0, 0x781f, 0x364, 0x3ff, 0x3ff, 0x364, 0x781f, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x364, 0x364, 0x3ff, 0x3ff, 0x364, 0x364, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x3ff, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364 
	.half 0x3ff, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x364, 0x3ff, 0x364 
	.half 0x3ff, 0x3ff, 0x364, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x0, 0x0, 0x364, 0x3ff, 0x3ff, 0x364, 0x0 
	.half 0x0, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	
.data 
.align, 4 
FrogUp2:
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x0, 0x3ff, 0x364, 0x3ff
	.half 0x3ff, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x781f, 0x364, 0x3ff, 0x3ff, 0x364, 0x781f, 0x364 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x364, 0x3ff, 0x3ff, 0x364, 0x364, 0x364, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ff, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ff, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x364, 0x3ff, 0x364, 0x3ff, 0x3ff, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364 
	.half 0x364, 0x364, 0x3ff, 0x3ff, 0x364, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x364 
	.half 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	
.data 
.align, 4 
FrogUp3:
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 
	.half 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x0, 0x0, 0x3ff, 0x364, 0x3ff, 0x3ff, 0x0, 0x0 
	.half 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x781f, 0x364, 0x3ff, 0x3ff, 0x364, 0x781f, 0x0, 0x364, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x364, 0x364, 0x3ff, 0x3ff, 0x364, 0x364, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ff, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x3ff, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x364, 0x3ff, 0x364, 0x3ff, 0x3ff, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x364, 0x3ff 
	.half 0x3ff, 0x364, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	
.data 
.align, 4 
FrogLeft1:
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x364, 0x364, 0x0, 0x364, 0x364, 0x364
	.half 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x781f, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ff, 0x364, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x3ff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ff
	.half 0x364, 0x364, 0x3ff, 0x364, 0x364, 0x3ff, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x781f, 0x364, 0x3ff 
	.half 0x3ff, 0x3ff, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x364, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x364, 0x364, 0x0, 0x364, 0x364, 0x364, 0x364, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	
.data 
.align, 4 
FrogLeft2:
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x364, 0x364, 0x364, 0x0, 0x0, 0x0, 0x364, 0x364, 0x364, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x781f, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x364, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ff, 0x364, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x0, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x3ff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ff, 0x364 
	.half 0x364, 0x3ff, 0x364, 0x364, 0x3ff, 0x364, 0x0, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x781f, 0x364, 0x3ff, 0x3ff 
	.half 0x3ff, 0x364, 0x364, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x364, 0x364, 0x364, 0x0, 0x0, 0x0, 0x364 
	.half 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	
.data 
.align, 4 
FrogLeft3:
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364 
	.half 0x364, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x364, 0x364, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x781f, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ff, 0x364, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x364, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x3ff, 0x364, 0x3ff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ff, 0x364
	.half 0x364, 0x3ff, 0x364, 0x364, 0x3ff, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x781f, 0x364, 0x3ff, 0x3ff 
	.half 0x3ff, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x364 
	.half 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x364, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x364 
	.half 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	
.data
.align, 4 
Nascar1:
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f
	.half 0x1f, 0x1f, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x1f 
	.half 0x1f, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b 
	.half 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x364, 0x364, 0x364, 0x364 
	.half 0x7b7b, 0x7b7b, 0x364, 0x364, 0x364, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x7b7b, 0x1f, 0x0, 0x1f 
	.half 0x7b7b, 0x7b7b, 0x364, 0x364, 0x364, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b7b, 0x1f, 0x7b7b, 0x1f, 0x7b7b, 0x1f, 0x7b7b
	.half 0x7b7b, 0x364, 0x364, 0x364, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x364, 0x364, 0x364, 0x364, 0x364, 0x7b7b, 0x7b7b, 0x364 
	.half 0x364, 0x364, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b
	.half 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x364, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x1f, 0x1f, 0x1f 
	.half 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x1f, 0x1f, 0x1f, 0x1f 
	.half 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 
	
.data 
.align, 4 
Bulldozer:
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x7b7b, 0x1f, 0x7b7b, 0x1f 
	.half 0x7b7b, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x7b7b, 0x1f, 0x7b7b, 0x1f, 0x7b7b, 0x1f, 0x0 
	.half 0x0, 0x0, 0x0, 0x7b7b, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x364, 0x364, 0x364 
	.half 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x7b7b, 0x1f, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x364, 0x364, 0x7b7b, 0x364, 0x0, 0x0, 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b7b, 0x7b7b, 0x364, 0x364, 0x364, 0x7b7b, 0x364, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x7b7b, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x7b7b, 0x7b7b, 0x364, 0x364, 0x364, 0x7b7b, 0x364, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x7b7b, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b7b
	.half 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x364, 0x364, 0x7b7b, 0x364, 0x0, 0x0, 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b7b, 0x7b7b, 0x7b7b
	.half 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x7b7b, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x364, 0x0, 0x0, 0x0, 0x364, 0x0 
	.half 0x0, 0x364, 0x364, 0x364, 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b7b, 0x1f, 0x7b7b, 0x1f, 0x7b7b, 0x1f, 0x7b7b, 0x0, 0x0, 0x0
	.half 0x0, 0x7b7b, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b7b, 0x1f, 0x7b7b, 0x1f, 0x7b7b, 0x1f, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x7b7b, 0x7b7b 
	.half 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	
.data 
.align, 4 
Log:
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x0, 0x25bb, 0x25bb, 0x25bb 
	.half 0x25bb, 0x0, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x0, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x0, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x7b7b 
	.half 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb
	.half 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x25bb, 0x25bb, 0x7b7b, 0x7b7b 
	.half 0x7b7b, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x25bb, 0x25bb, 0x7b7b, 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb 
	.half 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x7b7b 
	.half 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb 
	.half 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb 
	.half 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb
	.half 0x25bb, 0x7b7b, 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb 
	.half 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x25bb, 0x25bb, 0x7b7b, 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x7b7b
	.half 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb 
	.half 0x25bb, 0x7b7b, 0x25bb, 0x25bb, 0x7b7b, 0x25bb, 0x25bb, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb 
	.half 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x7b7b, 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x7b7b 
	.half 0x25bb, 0x7b7b, 0x7b7b, 0x7b7b, 0x25bb, 0x7b7b, 0x25bb, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb 
	.half 0x25bb, 0x0, 0x25b2, 0x7b7b, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25bb, 0x25b2, 0x25b2, 0x25b2, 0x25b2 
	.half 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x7b7b, 0x25bb, 0x25bb, 0x25bb, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x25b2, 0x0, 0x25b2 
	.half 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x7b7b, 0x7b7b, 0x7b7b, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2 
	.half 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x7b7b, 0x25bb, 0x25bb, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x25bb, 0x25bb, 0x25bb 
	.half 0x25b2, 0x25b2, 0x25b2, 0x0, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x0, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x0, 0x25b2, 0x25b2, 0x25b2, 0x25b2, 0x25b2 
	.half 0x25b2, 0x25b2, 0x25b2, 0x0, 0x25b2, 0x25b2, 0x25b2, 0x25bb, 0x7b7b, 0x7b7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
	.half 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 






